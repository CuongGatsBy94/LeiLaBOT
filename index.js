/**
 * @Author: CuongGatsBy94
 * @Date: 2025-10-05 04:12:42
 * @Last Modified by:   Your name
 * @Last Modified time: 2025-10-21 22:54:30
 */

require('dotenv').config();
const { 
    Client, 
    GatewayIntentBits, 
    EmbedBuilder, 
    ActivityType,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    Collection
} = require('discord.js');
const { 
    joinVoiceChannel, 
    createAudioPlayer, 
    createAudioResource, 
    AudioPlayerStatus, 
    entersState, 
    VoiceConnectionStatus 
} = require('@discordjs/voice');
const playdl = require('play-dl');
const ytdl = require('ytdl-core');
const fs = require('fs').promises;
const path = require('path');
const cron = require('node-cron');
const translate = require('@vitalets/google-translate-api');

// Kh·ªüi t·∫°o Client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.DirectMessages,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.GuildModeration,
    ]
});

// Bi·∫øn to√†n c·ª•c
const musicQueues = new Map();
client.commands = new Collection();

// Paths cho file config
const configPath = path.join(__dirname, 'config');
const dataPath = path.join(__dirname, 'data');

// ==================== H·ªÜ TH·ªêNG EMBED & STYLING ====================

// H·ªá th·ªëng m√†u s·∫Øc
const colors = {
    primary: 0x5865F2,    // Discord Blurple
    success: 0x57F287,    // Discord Green
    warning: 0xFEE75C,    // Discord Yellow
    error: 0xED4245,      // Discord Red
    music: 0xEB459E,      // Pink cho √¢m nh·∫°c
    info: 0x5865F2,       // Blue cho th√¥ng tin
    fun: 0xFF69B4,        // Pink cho gi·∫£i tr√≠
    utility: 0x99AAB5     // Gray cho ti·ªán √≠ch
};

// H√†m t·∫°o embed c∆° b·∫£n
function createEmbed(type, title, description, fields = [], thumbnail = null) {
    const embed = new EmbedBuilder()
        .setColor(colors[type] || colors.primary)
        .setTitle(title)
        .setDescription(description)
        .setTimestamp()
        .setFooter({ 
            text: 'LeiLaBOT ‚Ä¢ Trao g·ª≠i y√™u th∆∞∆°ng', 
            iconURL: client.user?.displayAvatarURL() 
        });

    if (fields.length > 0) {
        embed.addFields(...fields);
    }

    if (thumbnail) {
        embed.setThumbnail(thumbnail);
    }

    return embed;
}

// H√†m t·∫°o embed √¢m nh·∫°c
function createMusicEmbed(type, title, song = null, additionalFields = []) {
    const embed = createEmbed('music', title, song ? `**[${song.title}](${song.url})**` : '');

    if (song) {
        const fields = [
            { name: 'üì∫ K√™nh', value: song.channel, inline: true },
            { name: '‚è±Ô∏è Th·ªùi l∆∞·ª£ng', value: song.duration, inline: true },
            { name: 'üë§ Y√™u c·∫ßu b·ªüi', value: song.requester, inline: true },
            ...additionalFields
        ];
        embed.addFields(fields);
        
        if (song.thumbnail) {
            embed.setThumbnail(song.thumbnail);
        }
    }

    return embed;
}

// H√†m t·∫°o progress bar
function createProgressBar(current, total, length = 20) {
    const percentage = current / total;
    const progress = Math.round(length * percentage);
    const empty = length - progress;
    
    return '‚ñ∞'.repeat(progress) + '‚ñ±'.repeat(empty) + ` ${Math.round(percentage * 100)}%`;
}

// ==================== H·ªÜ TH·ªêNG FILE & CONFIG ====================

async function ensureDir(dirPath) {
    try {
        await fs.access(dirPath);
    } catch {
        await fs.mkdir(dirPath, { recursive: true });
    }
}

async function loadConfig(fileName, defaultData = {}) {
    try {
        const filePath = path.join(configPath, fileName);
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.log(`üìÅ T·∫°o file config m·ªõi: ${fileName}`);
        await saveConfig(fileName, defaultData);
        return defaultData;
    }
}

async function loadData(fileName, defaultData = {}) {
    try {
        const filePath = path.join(dataPath, fileName);
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.log(`üìÅ T·∫°o file data m·ªõi: ${fileName}`);
        await saveData(fileName, defaultData);
        return defaultData;
    }
}

async function saveConfig(fileName, data) {
    await ensureDir(configPath);
    const filePath = path.join(configPath, fileName);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
}

async function saveData(fileName, data) {
    await ensureDir(dataPath);
    const filePath = path.join(dataPath, fileName);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
}

// ==================== H·ªÜ TH·ªêNG √ÇM NH·∫†C ====================

function getQueue(guildId) {
    if (!musicQueues.has(guildId)) {
        musicQueues.set(guildId, {
            songs: [],
            currentIndex: 0,
            isPlaying: false,
            isPaused: false,
            connection: null,
            player: null,
            volume: 1,
            loop: false,
            textChannel: null
        });
    }
    return musicQueues.get(guildId);
}

async function playSong(guildId) {
    const queue = getQueue(guildId);
    
    if (queue.currentIndex >= queue.songs.length) {
        if (queue.loop && queue.songs.length > 0) {
            queue.currentIndex = 0;
        } else {
            if (queue.connection) {
                if (queue.textChannel) {
                    const embed = createEmbed('success', 'üéµ K·∫øt th√∫c h√†ng ch·ªù', 
                        'T·∫•t c·∫£ b√†i h√°t trong h√†ng ch·ªù ƒë√£ ƒë∆∞·ª£c ph√°t xong!');
                    queue.textChannel.send({ embeds: [embed] }).catch(console.error);
                }
                queue.connection.destroy();
            }
            musicQueues.delete(guildId);
            return;
        }
    }

    const song = queue.songs[queue.currentIndex];
    let retryCount = 0;
    const maxRetries = 3;

    while (retryCount < maxRetries) {
        try {
            queue.isPlaying = true;
            queue.isPaused = false;

            let stream;
            try {
                stream = await playdl.stream(song.url, { 
                    quality: 2,
                    discordPlayerCompatibility: true
                });
            } catch (playDlError) {
                console.error('‚ùå L·ªói play-dl:', playDlError?.message || playDlError);

                try {
                    console.log('üîÑ Fallback sang ytdl-core ƒë·ªÉ ph√°t:', song.url);
                    const ytStream = ytdl(song.url, {
                        filter: 'audioonly',
                        quality: 'highestaudio',
                        highWaterMark: 1 << 25
                    });
                    stream = {
                        stream: ytStream,
                        type: 'unknown'
                    };
                } catch (ytdlErr) {
                    console.error('‚ùå L·ªói ytdl-core fallback:', ytdlErr?.message || ytdlErr);
                    throw playDlError;
                }
            }

            const resource = createAudioResource(stream.stream, {
                inputType: stream.type,
                inlineVolume: true
            });

            if (resource && queue.player) {
                if (resource.volume) {
                    resource.volume.setVolume(queue.volume);
                }

                queue.player.play(resource);
                
                // Embed th√¥ng b√°o b√†i h√°t m·ªõi
                if (queue.textChannel) {
                    const progressBar = createProgressBar(queue.currentIndex + 1, queue.songs.length);
                    const embed = createMusicEmbed('music', 'üé∂ ƒêang ph√°t nh·∫°c', song, [
                        { name: 'üìä V·ªã tr√≠', value: `${queue.currentIndex + 1}/${queue.songs.length}`, inline: true },
                        { name: 'üîä √Çm l∆∞·ª£ng', value: `${Math.round(queue.volume * 100)}%`, inline: true },
                        { name: 'üìà Ti·∫øn ƒë·ªô', value: progressBar, inline: false }
                    ]);
                    
                    queue.textChannel.send({ embeds: [embed] }).catch(console.error);
                }

                queue.player.once(AudioPlayerStatus.Idle, () => {
                    setTimeout(() => {
                        if (!queue.loop) {
                            queue.currentIndex++;
                        }
                        playSong(guildId);
                    }, 1000);
                });

                queue.player.once('error', (error) => {
                    console.error('‚ùå L·ªói player:', error);
                    if (queue.textChannel) {
                        const embed = createEmbed('error', '‚ùå L·ªói ph√°t nh·∫°c', 
                            'C√≥ l·ªói x·∫£y ra khi ph√°t nh·∫°c! ƒêang th·ª≠ l·∫°i...');
                        queue.textChannel.send({ embeds: [embed] }).catch(console.error);
                    }
                    setTimeout(() => playSong(guildId), 5000);
                });

                break;
            }
        } catch (error) {
            console.error(`‚ùå L·ªói ph√°t nh·∫°c (L·∫ßn th·ª≠ ${retryCount + 1}/${maxRetries}):`, error);
            retryCount++;
            
            if (retryCount >= maxRetries) {
                if (queue.textChannel) {
                    const embed = createEmbed('error', '‚ùå L·ªói nghi√™m tr·ªçng', 
                        'Kh√¥ng th·ªÉ ph√°t b√†i h√°t sau nhi·ªÅu l·∫ßn th·ª≠! ƒêang chuy·ªÉn sang b√†i ti·∫øp theo...');
                    queue.textChannel.send({ embeds: [embed] }).catch(console.error);
                }
                queue.currentIndex++;
                setTimeout(() => playSong(guildId), 2000);
                break;
            }
            
            await new Promise(resolve => setTimeout(resolve, 5000));
            continue;
        }
    }
}

// ==================== H·ªÜ TH·ªêNG TIN NH·∫ÆN THEO KHUNG GI·ªú V·ªöI EMBED M·ªöI ====================

// Bi·∫øn l∆∞u tr·ªØ template embed cho c√°c khung gi·ªù
const scheduleTemplates = {
    morning: {
        title: "üåÖ CH√ÄO BU·ªîI S√ÅNG - 08:00",
        description: "H√£y b·∫Øt ƒë·∫ßu ng√†y m·ªõi v·ªõi nƒÉng l∆∞·ª£ng t√≠ch c·ª±c v√† tr√†n ƒë·∫ßy c·∫£m h·ª©ng! üåû",
        tip: "üí° M·∫πo: U·ªëng m·ªôt ly n∆∞·ªõc ·∫•m ƒë·ªÉ kh·ªüi ƒë·ªông h·ªá ti√™u h√≥a",
        tomorrow: "Ch√∫c b·∫°n m·ªôt ng√†y l√†m vi·ªác hi·ªáu qu·∫£ v√† nhi·ªÅu th√†nh c√¥ng! üíº",
        footer: "Have a wonderful day! üåà"
    },
    noon: {
        title: "üç± GI·ªú ƒÇN TR∆ØA - 12:00",
        description: "ƒê√£ ƒë·∫øn gi·ªù ngh·ªâ ng∆°i v√† n·∫°p nƒÉng l∆∞·ª£ng cho bu·ªïi chi·ªÅu! üçΩÔ∏è",
        tip: "üí° M·∫πo: ƒÇn ch·∫≠m nhai k·ªπ gi√∫p ti√™u h√≥a t·ªët h∆°n",
        tomorrow: "Bu·ªïi chi·ªÅu l√†m vi·ªác hi·ªáu qu·∫£ v√† tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng! üìä",
        footer: "Enjoy your meal! üòã"
    },
    afternoon: {
        title: "üå§Ô∏è BU·ªîI CHI·ªÄU - 17:30", 
        description: "C·ªë l√™n, ch·ªâ c√≤n m·ªôt ch√∫t n·ªØa l√† ho√†n th√†nh ng√†y l√†m vi·ªác! üí™",
        tip: "üí° M·∫πo: ƒê·ª©ng d·∫≠y v∆∞∆°n vai sau m·ªói 30 ph√∫t l√†m vi·ªác",
        tomorrow: "H·∫πn g·∫∑p l·∫°i b·∫°n v√†o ng√†y mai v·ªõi nhi·ªÅu ƒëi·ªÅu th√∫ v·ªã! üåá",
        footer: "You're doing great! üéØ"
    },
    evening: {
        title: "üåÉ BU·ªîI T·ªêI - 20:00",
        description: "Th·ªùi gian th∆∞ gi√£n v√† t·∫≠n h∆∞·ªüng kh√¥ng kh√≠ gia ƒë√¨nh ·∫•m √°p! üõãÔ∏è",
        tip: "üí° M·∫πo: T·∫Øt c√°c thi·∫øt b·ªã ƒëi·ªán t·ª≠ 1 gi·ªù tr∆∞·ªõc khi ng·ªß",
        tomorrow: "Ng√†y mai s·∫Ω mang ƒë·∫øn nh·ªØng c∆° h·ªôi m·ªõi tuy·ªát v·ªùi! ‚ú®",
        footer: "Relax and recharge! üéÆ"
    },
    night: {
        title: "üåô CH√öC NG·ª¶ NGON - 22:00",
        description: "ƒê√™m ƒë√£ khuya! H√£y t·∫Øt m√°y v√† ngh·ªâ ng∆°i th√¥i n√†o! üõå",
        tip: "üí° M·∫πo: Gi·ªØ ph√≤ng ng·ªß m√°t m·∫ª v√† tho√°ng kh√≠",
        tomorrow: "H·∫πn g·∫∑p l·∫°i v√†o bu·ªïi s√°ng! üåÖ",
        footer: "Sweet dreams! üí´"
    }
};

// H√†m t·∫°o embed theo template m·ªõi
function createScheduleEmbed(type, customDescription = null) {
    const template = scheduleTemplates[type];
    if (!template) return null;

    const colors = {
        morning: 0xFFD700,    // V√†ng
        noon: 0x32CD32,       // Xanh l√°
        afternoon: 0xFFA500,  // Cam
        evening: 0x8A2BE2,    // T√≠m
        night: 0x000080       // Xanh ƒë√™m
    };

    const embed = new EmbedBuilder()
        .setColor(colors[type])
        .setTitle(template.title)
        .setDescription(customDescription || template.description)
        .addFields(
            { 
                name: 'üåü ' + (type === 'morning' ? 'M·∫πo bu·ªïi s√°ng' : 
                              type === 'noon' ? 'M·∫πo ƒÉn u·ªëng' :
                              type === 'afternoon' ? 'M·∫πo l√†m vi·ªác' :
                              type === 'evening' ? 'M·∫πo th∆∞ gi√£n' : 'M·∫πo ng·ªß ngon'), 
                value: template.tip, 
                inline: false 
            },
            { 
                name: 'üìÖ ' + (type === 'night' ? 'Ng√†y mai' : 'Ti·∫øp theo'), 
                value: template.tomorrow, 
                inline: false 
            }
        )
        .setFooter({ text: template.footer })
        .setTimestamp();

    return embed;
}

// ==================== H·ªÜ TH·ªêNG G·ª¨I TIN NH·∫ÆN T·ª∞ ƒê·ªòNG ====================

async function setupScheduledMessages() {
    try {
        const botConfig = await loadConfig('botConfig.json');

        if (!botConfig.scheduleChannel) {
            console.log('‚è∞ Ch∆∞a c·∫•u h√¨nh channel tin nh·∫Øn t·ª± ƒë·ªông');
            return;
        }

        const scheduleTimes = [
            { time: '0 8 * * *', type: 'morning' },
            { time: '0 12 * * *', type: 'noon' },
            { time: '30 17 * * *', type: 'afternoon' },
            { time: '0 20 * * *', type: 'evening' },
            { time: '0 22 * * *', type: 'night' }
        ];

        scheduleTimes.forEach(({ time, type }) => {
            cron.schedule(time, async () => {
                try {
                    const channel = client.channels.cache.get(botConfig.scheduleChannel);
                    if (!channel) {
                        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y channel: ${botConfig.scheduleChannel}`);
                        return;
                    }

                    const embed = createScheduleEmbed(type);
                    if (embed) {
                        await channel.send({ embeds: [embed] });
                        console.log(`‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn t·ª± ƒë·ªông: ${scheduleTemplates[type].title}`);
                    }
                } catch (error) {
                    console.error(`‚ùå L·ªói g·ª≠i tin nh·∫Øn t·ª± ƒë·ªông ${type}:`, error);
                }
            }, {
                timezone: 'Asia/Ho_Chi_Minh'
            });
        });

        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p h·ªá th·ªëng tin nh·∫Øn t·ª± ƒë·ªông');
    } catch (error) {
        console.error('‚ùå L·ªói thi·∫øt l·∫≠p tin nh·∫Øn t·ª± ƒë·ªông:', error);
    }
}

// ==================== L·ªÜNH QU·∫¢N L√ù TIN NH·∫ÆN V·ªöI EMBED M·ªöI ====================

// Th√™m v√†o ph·∫ßn x·ª≠ l√Ω messageCreate
client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    
    const prefixConfig = await loadConfig('prefix.json', { prefix: "$" });
    const prefix = prefixConfig.prefix;

    if (!message.content.startsWith(prefix)) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    try {
        // L·ªánh test tin nh·∫Øn v·ªõi embed m·ªõi
        if (command === 'testschedule' || command === 'testmsg') {
            const type = args[0]?.toLowerCase();
            const validTypes = ['morning', 'noon', 'afternoon', 'evening', 'night'];

            if (!type || !validTypes.includes(type)) {
                const embed = new EmbedBuilder()
                    .setColor(0xED4245)
                    .setTitle('‚ùå Sai c√∫ ph√°p')
                    .setDescription('**S·ª≠ d·ª•ng:** `testschedule [lo·∫°i]`\n\n**Lo·∫°i c√≥ s·∫µn:**')
                    .addFields(
                        { name: 'üåÖ Morning', value: '08:00 - Ch√†o bu·ªïi s√°ng', inline: true },
                        { name: 'üç± Noon', value: '12:00 - Gi·ªù ƒÉn tr∆∞a', inline: true },
                        { name: 'üå§Ô∏è Afternoon', value: '17:30 - Bu·ªïi chi·ªÅu', inline: true },
                        { name: 'üåÉ Evening', value: '20:00 - Bu·ªïi t·ªëi', inline: true },
                        { name: 'üåô Night', value: '22:00 - Ch√∫c ng·ªß ngon', inline: true }
                    )
                    .setFooter({ text: 'V√≠ d·ª•: testschedule morning' });
                return message.reply({ embeds: [embed] });
            }

            // T·∫°o embed theo template m·ªõi
            const embed = createScheduleEmbed(type);
            
            if (!embed) {
                const errorEmbed = new EmbedBuilder()
                    .setColor(0xED4245)
                    .setTitle('‚ùå L·ªói')
                    .setDescription(`Kh√¥ng t√¨m th·∫•y template cho khung gi·ªù: ${type}`);
                return message.reply({ embeds: [errorEmbed] });
            }

            await message.reply({ embeds: [embed] });
        }

        // L·ªánh xem th√¥ng tin t·∫•t c·∫£ template
        if (command === 'scheduletemplates' || command === 'stemplates') {
            const embed = new EmbedBuilder()
                .setColor(0x5865F2)
                .setTitle('üé® TEMPLATE TIN NH·∫ÆN THEO KHUNG GI·ªú')
                .setDescription('D∆∞·ªõi ƒë√¢y l√† c√°c template c√≥ s·∫µn:')
                .addFields(
                    { 
                        name: 'üåÖ 08:00 - Morning', 
                        value: `**M√¥ t·∫£:** ${scheduleTemplates.morning.description}\n**M·∫πo:** ${scheduleTemplates.morning.tip}`,
                        inline: false 
                    },
                    { 
                        name: 'üç± 12:00 - Noon', 
                        value: `**M√¥ t·∫£:** ${scheduleTemplates.noon.description}\n**M·∫πo:** ${scheduleTemplates.noon.tip}`,
                        inline: false 
                    },
                    { 
                        name: 'üå§Ô∏è 17:30 - Afternoon', 
                        value: `**M√¥ t·∫£:** ${scheduleTemplates.afternoon.description}\n**M·∫πo:** ${scheduleTemplates.afternoon.tip}`,
                        inline: false 
                    },
                    { 
                        name: 'üåÉ 20:00 - Evening', 
                        value: `**M√¥ t·∫£:** ${scheduleTemplates.evening.description}\n**M·∫πo:** ${scheduleTemplates.evening.tip}`,
                        inline: false 
                    },
                    { 
                        name: 'üåô 22:00 - Night', 
                        value: `**M√¥ t·∫£:** ${scheduleTemplates.night.description}\n**M·∫πo:** ${scheduleTemplates.night.tip}`,
                        inline: false 
                    }
                )
                .setFooter({ text: 'S·ª≠ d·ª•ng testschedule [lo·∫°i] ƒë·ªÉ xem template ƒë·∫ßy ƒë·ªß' });

            await message.reply({ embeds: [embed] });
        }

        // L·ªánh setup channel tin nh·∫Øn t·ª± ƒë·ªông
        if (command === 'setschedulechannel' || command === 'setmsgchannel') {
            if (!message.member.permissions.has('Administrator')) {
                const embed = new EmbedBuilder()
                    .setColor(0xED4245)
                    .setTitle('‚ùå Thi·∫øu quy·ªÅn')
                    .setDescription('B·∫°n c·∫ßn quy·ªÅn **Administrator** ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
                return message.reply({ embeds: [embed] });
            }

            const channel = message.mentions.channels.first() || message.channel;
            
            const botConfig = await loadConfig('botConfig.json', {});
            botConfig.scheduleChannel = channel.id;
            await saveConfig('botConfig.json', botConfig);

            const embed = new EmbedBuilder()
                .setColor(0x57F287)
                .setTitle('‚úÖ ƒê√£ thi·∫øt l·∫≠p channel')
                .setDescription(`ƒê√£ ƒë·∫∑t channel tin nh·∫Øn t·ª± ƒë·ªông th√†nh: ${channel.toString()}`)
                .addFields(
                    { name: 'üìù C√°c khung gi·ªù', value: '08:00, 12:00, 17:30, 20:00, 22:00', inline: false },
                    { name: 'üé® Template', value: 'Embed ƒë∆∞·ª£c thi·∫øt k·∫ø s·∫µn ƒë·∫πp m·∫Øt', inline: false }
                )
                .setFooter({ text: 'Channel n√†y s·∫Ω nh·∫≠n tin nh·∫Øn t·ª± ƒë·ªông n·∫øu ƒë∆∞·ª£c k√≠ch ho·∫°t' });

            await message.reply({ embeds: [embed] });
        }

        // L·ªánh g·ª≠i tin nh·∫Øn th·ª≠ t·∫•t c·∫£ khung gi·ªù
        if (command === 'testallschedules' || command === 'testall') {
            if (!message.member.permissions.has('Administrator')) {
                const embed = new EmbedBuilder()
                    .setColor(0xED4245)
                    .setTitle('‚ùå Thi·∫øu quy·ªÅn')
                    .setDescription('B·∫°n c·∫ßn quy·ªÅn **Administrator** ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
                return message.reply({ embeds: [embed] });
            }

            const types = ['morning', 'noon', 'afternoon', 'evening', 'night'];
            
            for (const type of types) {
                const embed = createScheduleEmbed(type);
                if (embed) {
                    await message.channel.send({ embeds: [embed] });
                    // Delay 1 gi√¢y gi·ªØa c√°c tin nh·∫Øn
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }

            const summaryEmbed = new EmbedBuilder()
                .setColor(0x57F287)
                .setTitle('‚úÖ ƒê√£ g·ª≠i t·∫•t c·∫£ template')
                .setDescription('ƒê√£ g·ª≠i th√†nh c√¥ng 5 template tin nh·∫Øn theo khung gi·ªù!')
                .setFooter({ text: 'S·ª≠ d·ª•ng testschedule [lo·∫°i] ƒë·ªÉ xem t·ª´ng c√°i ri√™ng' });

            await message.reply({ embeds: [summaryEmbed] });
        }

        // L·ªánh custom tin nh·∫Øn v·ªõi template
        if (command === 'customschedule' || command === 'custommsg') {
            if (!message.member.permissions.has('Administrator')) {
                const embed = new EmbedBuilder()
                    .setColor(0xED4245)
                    .setTitle('‚ùå Thi·∫øu quy·ªÅn')
                    .setDescription('B·∫°n c·∫ßn quy·ªÅn **Administrator** ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
                return message.reply({ embeds: [embed] });
            }

            const type = args[0]?.toLowerCase();
            const customDescription = args.slice(1).join(' ');

            const validTypes = ['morning', 'noon', 'afternoon', 'evening', 'night'];

            if (!type || !validTypes.includes(type)) {
                const embed = new EmbedBuilder()
                    .setColor(0xED4245)
                    .setTitle('‚ùå Lo·∫°i kh√¥ng h·ª£p l·ªá')
                    .setDescription('**Lo·∫°i c√≥ s·∫µn:**\n`morning`, `noon`, `afternoon`, `evening`, `night`\n\n**V√≠ d·ª•:** `customschedule morning Ch√†o bu·ªïi s√°ng m·ªçi ng∆∞·ªùi!`');
                return message.reply({ embeds: [embed] });
            }

            if (!customDescription) {
                const embed = new EmbedBuilder()
                    .setColor(0xED4245)
                    .setTitle('‚ùå Thi·∫øu m√¥ t·∫£')
                    .setDescription('Vui l√≤ng cung c·∫•p n·ªôi dung m√¥ t·∫£ m·ªõi!\n\n**V√≠ d·ª•:** `customschedule morning "Ch√†o bu·ªïi s√°ng c·∫£ nh√†! H√¥m nay th·∫≠t tuy·ªát!"`');
                return message.reply({ embeds: [embed] });
            }

            const embed = createScheduleEmbed(type, customDescription);
            
            if (!embed) {
                const errorEmbed = new EmbedBuilder()
                    .setColor(0xED4245)
                    .setTitle('‚ùå L·ªói')
                    .setDescription(`Kh√¥ng t√¨m th·∫•y template cho khung gi·ªù: ${type}`);
                return message.reply({ embeds: [errorEmbed] });
            }

            await message.reply({ embeds: [embed] });
        }

    } catch (error) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω l·ªánh schedule:', error);
        const embed = new EmbedBuilder()
            .setColor(0xED4245)
            .setTitle('‚ùå L·ªói h·ªá th·ªëng')
            .setDescription('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh! Vui l√≤ng th·ª≠ l·∫°i.');
        await message.reply({ embeds: [embed] });
    }
});

// ==================== H·ªÜ TH·ªêNG SINH NH·∫¨T ====================

async function checkBirthdays() {
    try {
        const birthdays = await loadData('birthdays.json');
        const today = new Date();
        const todayStr = `${String(today.getDate()).padStart(2, '0')}-${String(today.getMonth() + 1).padStart(2, '0')}`;

        for (const [userId, birthday] of Object.entries(birthdays)) {
            if (birthday === todayStr) {
                const user = await client.users.fetch(userId).catch(() => null);
                if (user) {
                    const embed = createEmbed('fun', 'üéâ Ch√∫c m·ª´ng sinh nh·∫≠t!', 
                        `Ch√∫c m·ª´ng sinh nh·∫≠t ${user}! üéÇ\n\nCh√∫c b·∫°n m·ªôt ng√†y th·∫≠t tuy·ªát v·ªùi v·ªõi nhi·ªÅu ni·ªÅm vui v√† h·∫°nh ph√∫c! üéàüéÅ`)
                        .setThumbnail(user.displayAvatarURL())
                        .addFields(
                            { name: 'üéÇ Tu·ªïi m·ªõi', value: 'Th√™m m·ªôt tu·ªïi m·ªõi, th√™m nhi·ªÅu th√†nh c√¥ng!', inline: true },
                            { name: 'üéÅ L·ªùi ch√∫c', value: 'Lu√¥n vui v·∫ª v√† h·∫°nh ph√∫c nh√©!', inline: true }
                        );

                    client.guilds.cache.forEach(guild => {
                        const member = guild.members.cache.get(userId);
                        if (member) {
                            const generalChannel = guild.channels.cache.find(
                                channel => channel.type === 0 && channel.permissionsFor(guild.members.me).has('SendMessages')
                            );
                            if (generalChannel) {
                                generalChannel.send({ 
                                    content: `üéâ ${member.toString()}`, 
                                    embeds: [embed] 
                                }).catch(console.error);
                            }
                        }
                    });
                }
            }
        }
    } catch (error) {
        console.error('‚ùå L·ªói ki·ªÉm tra sinh nh·∫≠t:', error);
    }
}

// ==================== X·ª¨ L√ù S·ª∞ KI·ªÜN CH√çNH ====================

client.on('ready', async () => {
    console.log(`‚úÖ ${client.user.tag} ƒë√£ s·∫µn s√†ng!`);
    console.log(`üìä ƒêang ph·ª•c v·ª• ${client.guilds.cache.size} server`);
    console.log(`üë• T·ªïng s·ªë ${client.users.cache.size} ng∆∞·ªùi d√πng`);

    // Thi·∫øt l·∫≠p tr·∫°ng th√°i
    client.user.setPresence({
        activities: [{
            name: 'LeiLaBOT | $help',
            type: ActivityType.Playing
        }],
        status: 'online'
    });

    // Thi·∫øt l·∫≠p c√°c t√≠nh nƒÉng t·ª± ƒë·ªông
    await setupScheduledMessages();
    
    // Ki·ªÉm tra sinh nh·∫≠t h√†ng ng√†y
    setInterval(checkBirthdays, 60 * 60 * 1000);
    checkBirthdays();

    console.log('üöÄ Bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!');
});

client.on('guildMemberAdd', async (member) => {
    try {
        const welcomeConfig = await loadConfig('welcomeConfig.json');
        
        if (!welcomeConfig.welcomeChannel || !welcomeConfig.welcomeMessage) {
            return;
        }

        const channel = member.guild.channels.cache.get(welcomeConfig.welcomeChannel);
        if (!channel) return;

        const welcomeMessage = welcomeConfig.welcomeMessage
            .replace('{user}', member.toString())
            .replace('{server}', member.guild.name);

        const embed = createEmbed('success', 'üëã Ch√†o m·ª´ng th√†nh vi√™n m·ªõi!', welcomeMessage)
            .setThumbnail(member.user.displayAvatarURL())
            .addFields(
                { name: 'üéâ Th√†nh vi√™n th·ª©', value: `#${member.guild.memberCount}`, inline: true },
                { name: 'üìÖ Tham gia v√†o', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true },
                { name: 'üè† Server', value: member.guild.name, inline: true }
            )
            .setImage('https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/welcome-banner.png');

        await channel.send({ 
            content: `üéâ ${member.toString()}`, 
            embeds: [embed] 
        });

        // Th√™m role ch√†o m·ª´ng
        if (welcomeConfig.welcomeRole) {
            const role = member.guild.roles.cache.get(welcomeConfig.welcomeRole);
            if (role) {
                await member.roles.add(role).catch(console.error);
            }
        }
    } catch (error) {
        console.error('‚ùå L·ªói ch√†o m·ª´ng th√†nh vi√™n m·ªõi:', error);
    }
});

client.on('guildMemberRemove', async (member) => {
    try {
        const welcomeConfig = await loadConfig('welcomeConfig.json');
        
        if (!welcomeConfig.goodbyeChannel || !welcomeConfig.goodbyeMessage) {
            return;
        }

        const channel = member.guild.channels.cache.get(welcomeConfig.goodbyeChannel);
        if (!channel) return;

        const goodbyeMessage = welcomeConfig.goodbyeMessage
            .replace('{user}', member.user.tag)
            .replace('{server}', member.guild.name);

        const embed = createEmbed('error', 'üò¢ T·∫°m bi·ªát th√†nh vi√™n', goodbyeMessage)
            .setThumbnail(member.user.displayAvatarURL())
            .addFields(
                { name: 'üìä T·ªïng th√†nh vi√™n', value: `${member.guild.memberCount}`, inline: true },
                { name: '‚è∞ R·ªùi ƒëi l√∫c', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
            );

        await channel.send({ embeds: [embed] });
    } catch (error) {
        console.error('‚ùå L·ªói g·ª≠i tin nh·∫Øn t·∫°m bi·ªát:', error);
    }
});

// ==================== X·ª¨ L√ù L·ªÜNH ====================

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    // X·ª≠ l√Ω tin nh·∫Øn DM
    if (message.channel.type === 1) {
        try {
            const botConfig = await loadConfig('botConfig.json');
            
            if (botConfig.autoReply) {
                const responses = [
                    "Xin ch√†o! T√¥i l√† LeiLaBOT. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ ·∫°? üí´",
                    "Hi! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? ü§ñ",
                    "Ch√†o b·∫°n! G√µ `$help` ƒë·ªÉ xem danh s√°ch l·ªánh nh√©! üìö",
                    "Xin ch√†o! C·∫ßn tr·ª£ gi√∫p g√¨ kh√¥ng? üåü",
                    "Hello! B·∫°n c√≥ th·ªÉ tham gia server h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c gi√∫p ƒë·ª° t·ªët h∆°n! üéØ"
                ];
                
                const randomResponse = responses[Math.floor(Math.random() * responses.length)];
                const embed = createEmbed('primary', 'üí¨ LeiLaBOT Support', randomResponse)
                    .addFields(
                        { name: 'üîó Server h·ªó tr·ª£', value: '[Tham gia ngay](https://discord.gg/9CFJxJUBj7)', inline: true },
                        { name: 'üìö L·ªánh', value: 'G√µ `$help`', inline: true }
                    );

                await message.reply({ embeds: [embed] });
            }

            // Log DM
            if (botConfig.dmLogChannel) {
                const logChannel = client.channels.cache.get(botConfig.dmLogChannel);
                if (logChannel) {
                    const embed = createEmbed('info', 'üì® Tin nh·∫Øn DM m·ªõi', 
                        `**Ng∆∞·ªùi g·ª≠i:** ${message.author.tag} (${message.author.id})\n**N·ªôi dung:** ${message.content}`)
                        .setThumbnail(message.author.displayAvatarURL());

                    await logChannel.send({ embeds: [embed] });
                }
            }
        } catch (error) {
            console.error('‚ùå L·ªói x·ª≠ l√Ω DM:', error);
        }
        return;
    }

    // X·ª≠ l√Ω l·ªánh trong server
    const prefixConfig = await loadConfig('prefix.json', { prefix: "$" });
    const prefix = prefixConfig.prefix;

    if (!message.content.startsWith(prefix)) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    try {
        // ==================== L·ªÜNH TH√îNG TIN ====================
        if (command === 'ping') {
            const processingEmbed = createEmbed('info', '‚è≥ ƒêang x·ª≠ l√Ω...', 'ƒêang t√≠nh to√°n ƒë·ªô tr·ªÖ...');
            const msg = await message.reply({ embeds: [processingEmbed] });
            
            const ping = msg.createdTimestamp - message.createdTimestamp;
            const embed = createEmbed('success', 'üèì Pong!', 'ƒê·ªô tr·ªÖ h·ªá th·ªëng:')
                .addFields(
                    { name: 'üì° ƒê·ªô tr·ªÖ tin nh·∫Øn', value: `\`${ping}ms\``, inline: true },
                    { name: 'üíì ƒê·ªô tr·ªÖ API', value: `\`${Math.round(client.ws.ping)}ms\``, inline: true },
                    { name: '‚è∞ Uptime', value: `\`${formatUptime(process.uptime())}\``, inline: true }
                )
                .setThumbnail('https://cdn.discordapp.com/emojis/1107540430879342694.webp');

            await msg.edit({ embeds: [embed] });
        }

        if (command === 'help' || command === 'commands') {
            const embed = createEmbed('primary', 'ü§ñ LeiLaBOT - H·ªá th·ªëng l·ªánh', 
                `**Prefix hi·ªán t·∫°i:** \`${prefix}\`\nD∆∞·ªõi ƒë√¢y l√† t·∫•t c·∫£ c√°c l·ªánh c√≥ s·∫µn:`)
                .addFields(
                    {
                        name: 'üéµ √Çm nh·∫°c',
                        value: '```play, stop, pause, resume, skip, queue, volume, loop, nowplaying```',
                        inline: true
                    },
                    {
                        name: 'üîß Ti·ªán √≠ch',
                        value: '```ping, help, info, userinfo, serverinfo, avatar```',
                        inline: true
                    },
                    {
                        name: 'üë• Qu·∫£n l√Ω',
                        value: '```setprefix, setwelcome, clear, slowmode```',
                        inline: true
                    },
                    {
                        name: '‚è∞ T·ª± ƒë·ªông',
                        value: '```setschedule, testschedule, setbirthday```',
                        inline: true
                    },
                    {
                        name: 'üéÆ Gi·∫£i tr√≠',
                        value: '```poll, guess, quiz, lottery, remindme```',
                        inline: true
                    },
                    {
                        name: 'üåê Ti·ªán √≠ch',
                        value: '```translate, weather, covid```',
                        inline: true
                    }
                )
                .setImage('https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/help-banner.png');

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setLabel('üì• M·ªùi Bot')
                        .setStyle(ButtonStyle.Link)
                        .setURL('https://discord.com/oauth2/authorize?client_id=1421716299947708436'),
                    new ButtonBuilder()
                        .setLabel('üÜò H·ªó tr·ª£')
                        .setStyle(ButtonStyle.Link)
                        .setURL('https://discord.gg/9CFJxJUBj7'),
                    new ButtonBuilder()
                        .setLabel('üåê Website')
                        .setStyle(ButtonStyle.Link)
                        .setURL('https://leilabot.railway.app')
                );

            await message.reply({ embeds: [embed], components: [row] });
        }

        if (command === 'info') {
            const embed = createEmbed('info', 'ü§ñ Th√¥ng tin LeiLaBOT', 
                'LeiLaBOT - Discord Bot ƒëa nƒÉng Vi·ªát Nam v·ªõi giao di·ªán hi·ªán ƒë·∫°i v√† t√≠nh nƒÉng phong ph√∫!')
                .addFields(
                    { name: 'üëë Developer', value: '`CuongGatsBy94`', inline: true },
                    { name: 'üìö Th∆∞ vi·ªán', value: '`Discord.js v14`', inline: true },
                    { name: '‚è∞ Uptime', value: `\`${formatUptime(process.uptime())}\``, inline: true },
                    { name: 'üìä Server', value: `\`${client.guilds.cache.size}\``, inline: true },
                    { name: 'üë• Users', value: `\`${client.users.cache.size}\``, inline: true },
                    { name: 'üéµ Prefix', value: `\`${prefix}\``, inline: true },
                    { name: 'üöÄ Phi√™n b·∫£n', value: '`2.0.0`', inline: true },
                    { name: 'üìÖ Ng√†y t·∫°o', value: '<t:1725502362:R>', inline: true },
                    { name: 'üíæ B·ªô nh·ªõ', value: `\`${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB\``, inline: true }
                )
                .setThumbnail(client.user.displayAvatarURL())
                .setImage('https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/info-banner.png');

            await message.reply({ embeds: [embed] });
        }

        // ==================== L·ªÜNH √ÇM NH·∫†C ====================
        if (command === 'play' || command === 'p') {
            if (!args[0]) {
                const embed = createEmbed('error', '‚ùå Thi·∫øu th√¥ng tin', 
                    'Vui l√≤ng cung c·∫•p URL YouTube ho·∫∑c t√™n b√†i h√°t!\n\n**V√≠ d·ª•:**\n`$play https://youtube.com/...`\n`$play Shape of You`');
                return message.reply({ embeds: [embed] });
            }

            if (!message.member.voice.channel) {
                const embed = createEmbed('error', '‚ùå Ch∆∞a tham gia voice', 
                    'B·∫°n c·∫ßn tham gia voice channel tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh n√†y!');
                return message.reply({ embeds: [embed] });
            }

            const voiceChannel = message.member.voice.channel;
            const queue = getQueue(message.guild.id);
            queue.textChannel = message.channel;

            // Embed loading
            const loadingEmbed = createEmbed('info', '‚è≥ ƒêang x·ª≠ l√Ω...', 
                'ƒêang t√¨m ki·∫øm v√† t·∫£i th√¥ng tin b√†i h√°t...');
            const loadingMsg = await message.reply({ embeds: [loadingEmbed] });

            try {
                let songInfo;
                let searchQuery = args.join(' ');

                if (playdl.yt_validate(searchQuery) === 'video') {
                    songInfo = await playdl.video_info(searchQuery);
                } else {
                    const searchResults = await playdl.search(searchQuery, { limit: 1 });
                    if (!searchResults || searchResults.length === 0) {
                        const embed = createEmbed('error', '‚ùå Kh√¥ng t√¨m th·∫•y', 
                            'Kh√¥ng t√¨m th·∫•y b√†i h√°t ph√π h·ª£p v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n!');
                        return loadingMsg.edit({ embeds: [embed] });
                    }
                    songInfo = await playdl.video_info(searchResults[0].url);
                }

                const song = {
                    title: songInfo.video_details.title,
                    url: songInfo.video_details.url,
                    duration: songInfo.video_details.durationRaw,
                    thumbnail: songInfo.video_details.thumbnails[0]?.url || '',
                    channel: songInfo.video_details.channel?.name || 'Unknown',
                    requester: message.author.tag
                };

                // K·∫øt n·ªëi voice
                if (!queue.connection) {
                    queue.connection = joinVoiceChannel({
                        channelId: voiceChannel.id,
                        guildId: message.guild.id,
                        adapterCreator: message.guild.voiceAdapterCreator,
                    });

                    queue.player = createAudioPlayer();
                    queue.connection.subscribe(queue.player);
                }

                queue.songs.push(song);

                const embed = createMusicEmbed('success', '‚úÖ ƒê√£ th√™m v√†o h√†ng ch·ªù', song, [
                    { name: 'üìä V·ªã tr√≠', value: `#${queue.songs.length}`, inline: true },
                    { name: 'üéµ Tr·∫°ng th√°i', value: queue.isPlaying ? 'ƒêang ph√°t' : 'S·∫Ω ph√°t', inline: true }
                ]);

                await loadingMsg.edit({ embeds: [embed] });

                // Ph√°t nh·∫°c n·∫øu ch∆∞a ph√°t
                if (!queue.isPlaying) {
                    playSong(message.guild.id);
                }

            } catch (error) {
                console.error('‚ùå L·ªói play command:', error);
                const embed = createEmbed('error', '‚ùå L·ªói ph√°t nh·∫°c', 
                    'Kh√¥ng th·ªÉ ph√°t b√†i h√°t n√†y! Vui l√≤ng th·ª≠ l·∫°i v·ªõi URL ho·∫∑c t·ª´ kh√≥a kh√°c.');
                await loadingMsg.edit({ embeds: [embed] });
            }
        }

        if (command === 'stop') {
            const queue = getQueue(message.guild.id);
            if (queue.connection) {
                queue.connection.destroy();
                musicQueues.delete(message.guild.id);
                
                const embed = createEmbed('success', '‚èπÔ∏è ƒê√£ d·ª´ng ph√°t nh·∫°c', 
                    'ƒê√£ d·ª´ng ph√°t nh·∫°c v√† x√≥a to√†n b·ªô h√†ng ch·ªù!');
                await message.reply({ embeds: [embed] });
            } else {
                const embed = createEmbed('error', '‚ùå Kh√¥ng c√≥ nh·∫°c', 
                    'Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ƒë∆∞·ª£c ph√°t!');
                await message.reply({ embeds: [embed] });
            }
        }

        if (command === 'pause') {
            const queue = getQueue(message.guild.id);
            if (queue.player && queue.isPlaying && !queue.isPaused) {
                queue.player.pause();
                queue.isPaused = true;
                
                const embed = createEmbed('warning', '‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng', 
                    'Nh·∫°c ƒë√£ ƒë∆∞·ª£c t·∫°m d·ª´ng. S·ª≠ d·ª•ng `$resume` ƒë·ªÉ ti·∫øp t·ª•c.');
                await message.reply({ embeds: [embed] });
            } else {
                const embed = createEmbed('error', '‚ùå L·ªói t·∫°m d·ª´ng', 
                    'Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ho·∫∑c nh·∫°c ƒë√£ ƒë∆∞·ª£c t·∫°m d·ª´ng tr∆∞·ªõc ƒë√≥!');
                await message.reply({ embeds: [embed] });
            }
        }

        if (command === 'resume') {
            const queue = getQueue(message.guild.id);
            if (queue.player && queue.isPaused) {
                queue.player.unpause();
                queue.isPaused = false;
                
                const embed = createEmbed('success', '‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c', 
                    'Nh·∫°c ƒë√£ ƒë∆∞·ª£c ti·∫øp t·ª•c ph√°t!');
                await message.reply({ embeds: [embed] });
            } else {
                const embed = createEmbed('error', '‚ùå L·ªói ti·∫øp t·ª•c', 
                    'Nh·∫°c kh√¥ng ƒë∆∞·ª£c t·∫°m d·ª´ng ho·∫∑c kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!');
                await message.reply({ embeds: [embed] });
            }
        }

        if (command === 'skip') {
            const queue = getQueue(message.guild.id);
            if (queue.player && queue.isPlaying) {
                const skippedSong = queue.songs[queue.currentIndex];
                queue.player.stop();
                
                const embed = createEmbed('success', '‚è≠Ô∏è ƒê√£ b·ªè qua b√†i h√°t', 
                    `ƒê√£ b·ªè qua: **${skippedSong.title}**`);
                await message.reply({ embeds: [embed] });
            } else {
                const embed = createEmbed('error', '‚ùå Kh√¥ng c√≥ nh·∫°c', 
                    'Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ƒë∆∞·ª£c ph√°t!');
                await message.reply({ embeds: [embed] });
            }
        }

        if (command === 'queue' || command === 'q') {
            const queue = getQueue(message.guild.id);
            
            if (queue.songs.length === 0) {
                const embed = createEmbed('info', 'üì≠ H√†ng ch·ªù tr·ªëng', 
                    'Hi·ªán kh√¥ng c√≥ b√†i h√°t n√†o trong h√†ng ch·ªù!');
                return message.reply({ embeds: [embed] });
            }

            const currentSong = queue.songs[queue.currentIndex];
            const queueList = queue.songs.slice(queue.currentIndex, queue.currentIndex + 10)
                .map((song, index) => 
                    `${queue.currentIndex + index + 1}. **${song.title}** - ${song.requester}`
                )
                .join('\n');

            const totalDuration = queue.songs.reduce((acc, song) => {
                const [min, sec] = song.duration.split(':').map(Number);
                return acc + (min * 60 + sec);
            }, 0);

            const embed = createEmbed('music', 'üéµ H√†ng ch·ªù nh·∫°c', 
                `**ƒêang ph√°t:** ${currentSong.title}\n\n**B√†i h√°t ti·∫øp theo:**`)
                .addFields(
                    { name: 'üìã Danh s√°ch', value: queueList || 'Kh√¥ng c√≥ b√†i h√°t n√†o' },
                    { name: 'üìä Th·ªëng k√™', value: 
                        `‚Ä¢ T·ªïng s·ªë b√†i: ${queue.songs.length}\n` +
                        `‚Ä¢ V·ªã tr√≠ hi·ªán t·∫°i: ${queue.currentIndex + 1}\n` +
                        `‚Ä¢ T·ªïng th·ªùi l∆∞·ª£ng: ${Math.floor(totalDuration / 60)}:${(totalDuration % 60).toString().padStart(2, '0')}\n` +
                        `‚Ä¢ Tr·∫°ng th√°i: ${queue.isPlaying ? 'üé∂ ƒêang ph√°t' : '‚è∏Ô∏è T·∫°m d·ª´ng'}`
                    }
                )
                .setThumbnail(currentSong.thumbnail);

            await message.reply({ embeds: [embed] });
        }

        if (command === 'nowplaying' || command === 'np') {
            const queue = getQueue(message.guild.id);
            
            if (!queue.isPlaying || !queue.songs[queue.currentIndex]) {
                const embed = createEmbed('error', '‚ùå Kh√¥ng c√≥ nh·∫°c', 
                    'Hi·ªán kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ƒë∆∞·ª£c ph√°t!');
                return message.reply({ embeds: [embed] });
            }

            const currentSong = queue.songs[queue.currentIndex];
            const progress = createProgressBar(queue.currentIndex + 1, queue.songs.length, 15);

            const embed = createMusicEmbed('music', 'üé∂ ƒêang ph√°t', currentSong, [
                { name: 'üìä V·ªã tr√≠', value: `${queue.currentIndex + 1}/${queue.songs.length}`, inline: true },
                { name: 'üîä √Çm l∆∞·ª£ng', value: `${Math.round(queue.volume * 100)}%`, inline: true },
                { name: 'üîÑ L·∫∑p l·∫°i', value: queue.loop ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt', inline: true },
                { name: 'üìà Ti·∫øn ƒë·ªô', value: progress, inline: false }
            ]);

            await message.reply({ embeds: [embed] });
        }

        if (command === 'volume' || command === 'vol') {
            const queue = getQueue(message.guild.id);
            const volume = parseInt(args[0]);

            if (isNaN(volume) || volume < 0 || volume > 200) {
                const embed = createEmbed('error', '‚ùå Volume kh√¥ng h·ª£p l·ªá', 
                    'Volume ph·∫£i l√† s·ªë t·ª´ 0 ƒë·∫øn 200!');
                return message.reply({ embeds: [embed] });
            }

            queue.volume = volume / 100;
            
            const embed = createEmbed('success', 'üîä ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng', 
                `ƒê√£ ƒë·∫∑t √¢m l∆∞·ª£ng th√†nh: **${volume}%**`);
            await message.reply({ embeds: [embed] });
        }

        if (command === 'loop') {
            const queue = getQueue(message.guild.id);
            queue.loop = !queue.loop;
            
            const embed = createEmbed('success', 'üîÑ Ch·∫ø ƒë·ªô l·∫∑p', 
                `Ch·∫ø ƒë·ªô l·∫∑p ƒë√£ ƒë∆∞·ª£c **${queue.loop ? 'B·∫¨T' : 'T·∫ÆT'}**`);
            await message.reply({ embeds: [embed] });
        }

        // ==================== L·ªÜNH QU·∫¢N L√ù ====================
        if (command === 'setprefix') {
            if (!message.member.permissions.has('Administrator')) {
                const embed = createEmbed('error', '‚ùå Thi·∫øu quy·ªÅn', 
                    'B·∫°n c·∫ßn quy·ªÅn **Administrator** ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
                return message.reply({ embeds: [embed] });
            }

            if (!args[0]) {
                const embed = createEmbed('error', '‚ùå Thi·∫øu prefix', 
                    'Vui l√≤ng cung c·∫•p prefix m·ªõi!\n\n**V√≠ d·ª•:** `$setprefix !`');
                return message.reply({ embeds: [embed] });
            }

            const newPrefix = args[0];
            await saveConfig('prefix.json', { prefix: newPrefix });

            const embed = createEmbed('success', '‚úÖ ƒê√£ thay ƒë·ªïi prefix', 
                `Prefix m·ªõi: \`${newPrefix}\`\n\n**L∆∞u √Ω:** Prefix ch·ªâ thay ƒë·ªïi tr√™n server n√†y.`);
            await message.reply({ embeds: [embed] });
        }

        if (command === 'userinfo') {
            const target = message.mentions.users.first() || message.author;
            const member = message.guild.members.cache.get(target.id);

            const embed = createEmbed('info', `üë§ Th√¥ng tin ${target.username}`, '')
                .setThumbnail(target.displayAvatarURL({ size: 256 }))
                .addFields(
                    { name: 'üÜî ID', value: `\`${target.id}\``, inline: true },
                    { name: 'üìõ Bi·ªát danh', value: member?.nickname || '`Kh√¥ng c√≥`', inline: true },
                    { name: 'ü§ñ Bot', value: target.bot ? '`‚úÖ`' : '`‚ùå`', inline: true },
                    { name: 'üéÇ T√†i kho·∫£n t·∫°o', value: `<t:${Math.floor(target.createdTimestamp / 1000)}:R>`, inline: true },
                    { name: 'üìÖ Tham gia server', value: member ? `<t:${Math.floor(member.joinedTimestamp / 1000)}:R>` : '`Kh√¥ng c√≥`', inline: true },
                    { name: 'üé≠ Roles', value: `\`${member?.roles.cache.size - 1}\``, inline: true }
                )
                .setImage(target.displayAvatarURL({ size: 1024 }));

            await message.reply({ embeds: [embed] });
        }

        if (command === 'serverinfo') {
            const guild = message.guild;

            const embed = createEmbed('info', `üè† ${guild.name}`, '')
                .setThumbnail(guild.iconURL({ size: 256 }))
                .addFields(
                    { name: 'üÜî ID', value: `\`${guild.id}\``, inline: true },
                    { name: 'üëë Ch·ªß server', value: `<@${guild.ownerId}>`, inline: true },
                    { name: 'üìÖ T·∫°o v√†o', value: `<t:${Math.floor(guild.createdTimestamp / 1000)}:R>`, inline: true },
                    { name: 'üë• Th√†nh vi√™n', value: `\`${guild.memberCount}\``, inline: true },
                    { name: 'üé≠ Roles', value: `\`${guild.roles.cache.size}\``, inline: true },
                    { name: 'üìÅ Channels', value: `\`${guild.channels.cache.size}\``, inline: true },
                    { name: 'üåç Khu v·ª±c', value: `\`${guild.preferredLocale}\``, inline: true },
                    { name: 'üîí X√°c minh', value: guild.verified ? '`‚úÖ`' : '`‚ùå`', inline: true },
                    { name: 'üöÄ Nitro Boost', value: `Level \`${guild.premiumTier}\``, inline: true }
                )
                .setImage(guild.bannerURL({ size: 1024 }) || 'https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/server-banner.png');

            await message.reply({ embeds: [embed] });
        }

        if (command === 'avatar' || command === 'av') {
            const target = message.mentions.users.first() || message.author;
            
            const embed = createEmbed('info', `üñºÔ∏è Avatar c·ªßa ${target.username}`, '')
                .setImage(target.displayAvatarURL({ size: 1024, dynamic: true }))
                .addFields(
                    { name: 'üîó Link avatar', value: `[T·∫£i xu·ªëng](${target.displayAvatarURL({ size: 4096, dynamic: true })})`, inline: true }
                );

            await message.reply({ embeds: [embed] });
        }

        // ==================== L·ªÜNH GI·∫¢I TR√ç ====================
        if (command === 'poll') {
            if (args.length < 3) {
                const embed = createEmbed('error', '‚ùå Sai c√∫ ph√°p', 
                    '**S·ª≠ d·ª•ng:** `poll "c√¢u h·ªèi" "l·ª±a ch·ªçn1" "l·ª±a ch·ªçn2" ...`\n\n**V√≠ d·ª•:**\n`$poll "M√≥n ƒÉn y√™u th√≠ch?" "Pizza" "Burgers" "Sushi"`');
                return message.reply({ embeds: [embed] });
            }

            const question = args[0].replace(/"/g, '');
            const choices = args.slice(1).map(choice => choice.replace(/"/g, ''));

            if (choices.length > 10) {
                const embed = createEmbed('error', '‚ùå Qu√° nhi·ªÅu l·ª±a ch·ªçn', 
                    'Ch·ªâ ƒë∆∞·ª£c t·ªëi ƒëa 10 l·ª±a ch·ªçn!');
                return message.reply({ embeds: [embed] });
            }

            const emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
            let description = `**${question}**\n\n`;

            choices.forEach((choice, index) => {
                description += `${emojis[index]} ${choice}\n`;
            });

            const embed = createEmbed('fun', 'üìä B√¨nh ch·ªçn m·ªõi', description)
                .setFooter({ text: `T·∫°o b·ªüi ${message.author.tag} ‚Ä¢ Ph·∫£n ·ª©ng ƒë·ªÉ b√¨nh ch·ªçn!` });

            const pollMessage = await message.reply({ embeds: [embed] });

            // Th√™m reactions
            for (let i = 0; i < choices.length; i++) {
                await pollMessage.react(emojis[i]);
            }
        }

        // ==================== L·ªÜNH TI·ªÜN √çCH ====================
        if (command === 'translate') {
            if (args.length < 2) {
                const embed = createEmbed('error', '‚ùå Sai c√∫ ph√°p', 
                    '**S·ª≠ d·ª•ng:** `translate [ng√¥n ng·ªØ ƒë√≠ch] [vƒÉn b·∫£n]`\n\n**V√≠ d·ª•:**\n`$translate vi Hello world`\n`$translate en Xin ch√†o`');
                return message.reply({ embeds: [embed] });
            }

            const targetLang = args[0];
            const text = args.slice(1).join(' ');

            const loadingEmbed = createEmbed('info', 'üåê ƒêang d·ªãch...', 
                'ƒêang x·ª≠ l√Ω y√™u c·∫ßu d·ªãch thu·∫≠t...');
            const loadingMsg = await message.reply({ embeds: [loadingEmbed] });

            try {
                const result = await translate(text, { to: targetLang });
                
                const embed = createEmbed('success', 'üåê D·ªãch thu·∫≠t th√†nh c√¥ng', '')
                    .addFields(
                        { name: 'üì• VƒÉn b·∫£n g·ªëc', value: text, inline: false },
                        { name: 'üì§ VƒÉn b·∫£n d·ªãch', value: result.text, inline: false },
                        { name: 'üåç Ng√¥n ng·ªØ', value: `\`${result.from.language.iso}\` ‚Üí \`${targetLang}\``, inline: true }
                    )
                    .setThumbnail('https://cdn.discordapp.com/emojis/1107540430879342694.webp');

                await loadingMsg.edit({ embeds: [embed] });
            } catch (error) {
                const embed = createEmbed('error', '‚ùå L·ªói d·ªãch thu·∫≠t', 
                    'Kh√¥ng th·ªÉ d·ªãch vƒÉn b·∫£n! Vui l√≤ng th·ª≠ l·∫°i.');
                await loadingMsg.edit({ embeds: [embed] });
            }
        }

        if (command === 'clear' || command === 'purge') {
            if (!message.member.permissions.has('ManageMessages')) {
                const embed = createEmbed('error', '‚ùå Thi·∫øu quy·ªÅn', 
                    'B·∫°n c·∫ßn quy·ªÅn **Qu·∫£n l√Ω tin nh·∫Øn** ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
                return message.reply({ embeds: [embed] });
            }

            const amount = parseInt(args[0]);
            if (isNaN(amount) || amount < 1 || amount > 100) {
                const embed = createEmbed('error', '‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá', 
                    'Vui l√≤ng cung c·∫•p s·ªë l∆∞·ª£ng tin nh·∫Øn h·ª£p l·ªá (1-100)!');
                return message.reply({ embeds: [embed] });
            }

            try {
                const messages = await message.channel.bulkDelete(amount + 1, true);
                
                const embed = createEmbed('success', 'üßπ ƒê√£ d·ªçn d·∫πp', 
                    `ƒê√£ x√≥a **${messages.size - 1}** tin nh·∫Øn th√†nh c√¥ng!`);
                const reply = await message.channel.send({ embeds: [embed] });
                
                setTimeout(() => reply.delete(), 5000);
            } catch (error) {
                console.error('‚ùå L·ªói x√≥a tin nh·∫Øn:', error);
                const embed = createEmbed('error', '‚ùå L·ªói d·ªçn d·∫πp', 
                    'Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn! C√≥ th·ªÉ tin nh·∫Øn qu√° c≈© (h∆°n 14 ng√†y).');
                await message.reply({ embeds: [embed] });
            }
        }

        // ==================== L·ªÜNH SINH NH·∫¨T ====================
        if (command === 'setbirthday') {
            if (!args[0]) {
                const embed = createEmbed('error', '‚ùå Thi·∫øu th√¥ng tin', 
                    '**S·ª≠ d·ª•ng:** `setbirthday DD-MM`\n\n**V√≠ d·ª•:**\n`$setbirthday 15-10`\n`$setbirthday 03-12`');
                return message.reply({ embeds: [embed] });
            }

            const birthday = args[0];
            const birthdayRegex = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])$/;

            if (!birthdayRegex.test(birthday)) {
                const embed = createEmbed('error', '‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá', 
                    'ƒê·ªãnh d·∫°ng ng√†y sinh kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng **DD-MM** (v√≠ d·ª•: 15-10)');
                return message.reply({ embeds: [embed] });
            }

            const birthdays = await loadData('birthdays.json');
            birthdays[message.author.id] = birthday;
            await saveData('birthdays.json', birthdays);

            const embed = createEmbed('success', 'üéâ ƒê√£ ƒë·∫∑t ng√†y sinh nh·∫≠t!', 
                `Ng√†y sinh nh·∫≠t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh: **${birthday}**\n\nB·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c l·ªùi ch√∫c m·ª´ng sinh nh·∫≠t t·ª± ƒë·ªông v√†o ng√†y n√†y! üéÇ`)
                .setThumbnail('https://cdn.discordapp.com/emojis/1107540430879342694.webp');

            await message.reply({ embeds: [embed] });
        }

    } catch (error) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω l·ªánh:', error);
        const embed = createEmbed('error', '‚ùå L·ªói h·ªá th·ªëng', 
            'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh! Vui l√≤ng th·ª≠ l·∫°i sau.');
        await message.reply({ embeds: [embed] });
    }
});

// ==================== H√ÄM TI·ªÜN √çCH ====================

function formatUptime(seconds) {
    const days = Math.floor(seconds / (24 * 60 * 60));
    const hours = Math.floor((seconds % (24 * 60 * 60)) / (60 * 60));
    const minutes = Math.floor((seconds % (60 * 60)) / 60);
    const secs = Math.floor(seconds % 60);

    const parts = [];
    if (days > 0) parts.push(`${days} ng√†y`);
    if (hours > 0) parts.push(`${hours} gi·ªù`);
    if (minutes > 0) parts.push(`${minutes} ph√∫t`);
    if (secs > 0) parts.push(`${secs} gi√¢y`);

    return parts.join(' ');
}

// ==================== X·ª¨ L√ù L·ªñI ====================

client.on('error', console.error);
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
});

// ==================== KH·ªûI CH·∫†Y BOT ====================

client.login(process.env.DISCORD_TOKEN).catch(error => {
    console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p bot:', error);
    process.exit(1);
});