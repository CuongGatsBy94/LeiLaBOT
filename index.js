/**
 * @Author: CuongGatsBy94
 * @Date: 2025-10-05 04:12:42
 * @Last Modified by:   Your name
 * @Last Modified time: 2025-10-25 18:16:05
 */

require('dotenv').config();
const { 
    Client, 
    GatewayIntentBits, 
    EmbedBuilder, 
    ActivityType,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    Collection,
    PermissionsBitField
} = require('discord.js');
const { 
    joinVoiceChannel, 
    createAudioPlayer, 
    createAudioResource, 
    AudioPlayerStatus, 
    entersState, 
    VoiceConnectionStatus 
} = require('@discordjs/voice');
const playdl = require('play-dl');
const ytdl = require('ytdl-core');
const fs = require('fs').promises;
const path = require('path');
const cron = require('node-cron');
const translate = require('@vitalets/google-translate-api');

// ==================== H·ªÜ TH·ªêNG LOGGING CHUY√äN NGHI·ªÜP ====================

class Logger {
    static log(level, message, data = null) {
        const timestamp = new Date().toLocaleString('vi-VN', { 
            timeZone: 'Asia/Ho_Chi_Minh',
            hour12: false 
        });
        const emoji = {
            info: 'üìù',
            success: '‚úÖ',
            warning: '‚ö†Ô∏è',
            error: '‚ùå',
            debug: 'üêõ',
            music: 'üéµ',
            event: 'üé™',
            command: '‚ö°'
        }[level] || 'üìÑ';

        console.log(`[${timestamp}] ${emoji} [${level.toUpperCase()}] ${message}`);
        
        if (data && process.env.DEBUG === 'true') {
            console.log(`[${timestamp}] üîç [DEBUG]`, data);
        }
    }

    static info(message, data = null) {
        this.log('info', message, data);
    }

    static success(message, data = null) {
        this.log('success', message, data);
    }

    static warn(message, data = null) {
        this.log('warning', message, data);
    }

    static error(message, data = null) {
        this.log('error', message, data);
    }

    static debug(message, data = null) {
        this.log('debug', message, data);
    }

    static music(message, data = null) {
        this.log('music', message, data);
    }

    static event(message, data = null) {
        this.log('event', message, data);
    }

    static command(message, data = null) {
        this.log('command', message, data);
    }
}

// Kh·ªüi t·∫°o Client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.DirectMessages,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.GuildModeration,
    ]
});

// Bi·∫øn to√†n c·ª•c
const musicQueues = new Map();
client.commands = new Collection();

// Paths cho file config
const configPath = path.join(__dirname, 'config');
const dataPath = path.join(__dirname, 'data');

// ==================== H·ªÜ TH·ªêNG EMBED & STYLING ====================

// H·ªá th·ªëng m√†u s·∫Øc
const colors = {
    primary: 0x5865F2,    // Discord Blurple
    success: 0x57F287,    // Discord Green
    warning: 0xFEE75C,    // Discord Yellow
    error: 0xED4245,      // Discord Red
    music: 0xEB459E,      // Pink cho √¢m nh·∫°c
    info: 0x5865F2,       // Blue cho th√¥ng tin
    fun: 0xFF69B4,        // Pink cho gi·∫£i tr√≠
    utility: 0x99AAB5     // Gray cho ti·ªán √≠ch
};

// H√†m t·∫°o embed c∆° b·∫£n
function createEmbed(type, title, description, fields = [], thumbnail = null) {
    const embed = new EmbedBuilder()
        .setColor(colors[type] || colors.primary)
        .setTitle(title)
        .setDescription(description)
        .setTimestamp()
        .setFooter({ 
            text: 'LeiLaBOT ‚Ä¢ Trao g·ª≠i y√™u th∆∞∆°ng', 
            iconURL: client.user?.displayAvatarURL() 
        });

    if (fields.length > 0) {
        embed.addFields(...fields);
    }

    if (thumbnail) {
        embed.setThumbnail(thumbnail);
    }

    return embed;
}

// H√†m t·∫°o embed √¢m nh·∫°c
function createMusicEmbed(type, title, song = null, additionalFields = []) {
    const embed = createEmbed('music', title, song ? `**[${song.title}](${song.url})**` : '');

    if (song) {
        const fields = [
            { name: 'üì∫ K√™nh', value: song.channel, inline: true },
            { name: '‚è±Ô∏è Th·ªùi l∆∞·ª£ng', value: song.duration, inline: true },
            { name: 'üë§ Y√™u c·∫ßu b·ªüi', value: song.requester, inline: true },
            ...additionalFields
        ];
        embed.addFields(fields);
        
        if (song.thumbnail) {
            embed.setThumbnail(song.thumbnail);
        }
    }

    return embed;
}

// H√†m t·∫°o progress bar
function createProgressBar(current, total, length = 20) {
    const percentage = current / total;
    const progress = Math.round(length * percentage);
    const empty = length - progress;
    
    return '‚ñ∞'.repeat(progress) + '‚ñ±'.repeat(empty) + ` ${Math.round(percentage * 100)}%`;
}

// ==================== H·ªÜ TH·ªêNG FILE & CONFIG ====================

async function ensureDir(dirPath) {
    try {
        await fs.access(dirPath);
    } catch {
        await fs.mkdir(dirPath, { recursive: true });
        Logger.info(`ƒê√£ t·∫°o th∆∞ m·ª•c: ${dirPath}`);
    }
}

async function loadConfig(fileName, defaultData = {}) {
    try {
        const filePath = path.join(configPath, fileName);
        
        // ƒê·ªåC FILE TR·ª∞C TI·∫æP M·ªñI L·∫¶N - KH√îNG D√ôNG CACHE
        const data = await fs.readFile(filePath, 'utf8');
        const config = JSON.parse(data);
        
        Logger.debug(`ƒê√£ t·∫£i config: ${fileName}`, config);
        return config;
    } catch (error) {
        Logger.info(`T·∫°o file config m·ªõi: ${fileName}`, defaultData);
        await saveConfig(fileName, defaultData);
        return defaultData;
    }
}

async function loadData(fileName, defaultData = {}) {
    try {
        const filePath = path.join(dataPath, fileName);
        const data = await fs.readFile(filePath, 'utf8');
        Logger.info(`ƒê√£ t·∫£i data: ${fileName}`);
        return JSON.parse(data);
    } catch (error) {
        Logger.info(`T·∫°o file data m·ªõi: ${fileName}`, defaultData);
        await saveData(fileName, defaultData);
        return defaultData;
    }
}

async function saveConfig(fileName, data) {
    await ensureDir(configPath);
    const filePath = path.join(configPath, fileName);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
    Logger.info(`ƒê√£ l∆∞u config: ${fileName}`);
}

async function saveData(fileName, data) {
    await ensureDir(dataPath);
    const filePath = path.join(dataPath, fileName);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
    Logger.info(`ƒê√£ l∆∞u data: ${fileName}`);
}

// ==================== H·ªÜ TH·ªêNG √ÇM NH·∫†C ====================

function getQueue(guildId) {
    if (!musicQueues.has(guildId)) {
        musicQueues.set(guildId, {
            songs: [],
            currentIndex: 0,
            isPlaying: false,
            isPaused: false,
            connection: null,
            player: null,
            volume: 1,
            loop: false,
            textChannel: null
        });
    }
    return musicQueues.get(guildId);
}

async function playSong(guildId) {
    const queue = getQueue(guildId);
    
    if (queue.currentIndex >= queue.songs.length) {
        if (queue.loop && queue.songs.length > 0) {
            queue.currentIndex = 0;
        } else {
            if (queue.connection) {
                if (queue.textChannel) {
                    const embed = createEmbed('success', 'üéµ K·∫øt th√∫c h√†ng ch·ªù', 
                        'T·∫•t c·∫£ b√†i h√°t trong h√†ng ch·ªù ƒë√£ ƒë∆∞·ª£c ph√°t xong!');
                    queue.textChannel.send({ embeds: [embed] }).catch(error => {
                        Logger.error('L·ªói g·ª≠i tin nh·∫Øn k·∫øt th√∫c h√†ng ch·ªù:', error);
                    });
                }
                queue.connection.destroy();
            }
            musicQueues.delete(guildId);
            Logger.music(`ƒê√£ x√≥a h√†ng ch·ªù nh·∫°c cho guild: ${guildId}`);
            return;
        }
    }

    const song = queue.songs[queue.currentIndex];
    let retryCount = 0;
    const maxRetries = 3;

    while (retryCount < maxRetries) {
        try {
            queue.isPlaying = true;
            queue.isPaused = false;

            let stream;
            try {
                stream = await playdl.stream(song.url, { 
                    quality: 2,
                    discordPlayerCompatibility: true
                });
            } catch (playDlError) {
                Logger.error('L·ªói play-dl:', playDlError?.message || playDlError);

                try {
                    Logger.debug('Fallback sang ytdl-core ƒë·ªÉ ph√°t:', song.url);
                    const ytStream = ytdl(song.url, {
                        filter: 'audioonly',
                        quality: 'highestaudio',
                        highWaterMark: 1 << 25
                    });
                    stream = {
                        stream: ytStream,
                        type: 'unknown'
                    };
                } catch (ytdlErr) {
                    Logger.error('L·ªói ytdl-core fallback:', ytdlErr?.message || ytdlErr);
                    throw playDlError;
                }
            }

            const resource = createAudioResource(stream.stream, {
                inputType: stream.type,
                inlineVolume: true
            });

            if (resource && queue.player) {
                if (resource.volume) {
                    resource.volume.setVolume(queue.volume);
                }

                queue.player.play(resource);
                
                // Embed th√¥ng b√°o b√†i h√°t m·ªõi
                if (queue.textChannel) {
                    const progressBar = createProgressBar(queue.currentIndex + 1, queue.songs.length);
                    const embed = createMusicEmbed('music', 'üé∂ ƒêang ph√°t nh·∫°c', song, [
                        { name: 'üìä V·ªã tr√≠', value: `${queue.currentIndex + 1}/${queue.songs.length}`, inline: true },
                        { name: 'üîä √Çm l∆∞·ª£ng', value: `${Math.round(queue.volume * 100)}%`, inline: true },
                        { name: 'üìà Ti·∫øn ƒë·ªô', value: progressBar, inline: false }
                    ]);
                    
                    queue.textChannel.send({ embeds: [embed] }).catch(error => {
                        Logger.error('L·ªói g·ª≠i embed b√†i h√°t:', error);
                    });
                }

                Logger.music(`ƒêang ph√°t: ${song.title}`, {
                    guild: guildId,
                    position: queue.currentIndex + 1,
                    total: queue.songs.length
                });

                queue.player.once(AudioPlayerStatus.Idle, () => {
                    setTimeout(() => {
                        if (!queue.loop) {
                            queue.currentIndex++;
                        }
                        playSong(guildId);
                    }, 1000);
                });

                queue.player.once('error', (error) => {
                    Logger.error('L·ªói player:', error);
                    if (queue.textChannel) {
                        const embed = createEmbed('error', '‚ùå L·ªói ph√°t nh·∫°c', 
                            'C√≥ l·ªói x·∫£y ra khi ph√°t nh·∫°c! ƒêang th·ª≠ l·∫°i...');
                        queue.textChannel.send({ embeds: [embed] }).catch(console.error);
                    }
                    setTimeout(() => playSong(guildId), 5000);
                });

                break;
            }
        } catch (error) {
            Logger.error(`L·ªói ph√°t nh·∫°c (L·∫ßn th·ª≠ ${retryCount + 1}/${maxRetries}):`, error);
            retryCount++;
            
            if (retryCount >= maxRetries) {
                if (queue.textChannel) {
                    const embed = createEmbed('error', '‚ùå L·ªói nghi√™m tr·ªçng', 
                        'Kh√¥ng th·ªÉ ph√°t b√†i h√°t sau nhi·ªÅu l·∫ßn th·ª≠! ƒêang chuy·ªÉn sang b√†i ti·∫øp theo...');
                    queue.textChannel.send({ embeds: [embed] }).catch(console.error);
                }
                queue.currentIndex++;
                setTimeout(() => playSong(guildId), 2000);
                break;
            }
            
            await new Promise(resolve => setTimeout(resolve, 5000));
            continue;
        }
    }
}

// ==================== TIN NH·∫ÆN CH√ÄO M·ª™NG & T·∫†M BI·ªÜT ====================

const welcomeMessages = [
    {
        title: "üéâ CH√ÄO M·ª™NG TH√ÄNH VI√äN M·ªöI!",
        description: "Ch√†o m·ª´ng {user} ƒë·∫øn v·ªõi {server}! üéä",
        content: "Ch√∫ng t√¥i r·∫•t vui khi c√≥ b·∫°n tham gia c·ªông ƒë·ªìng! H√£y gi·ªõi thi·ªáu ƒë√¥i ch√∫t v·ªÅ b·∫£n th√¢n nh√©! üí´",
        color: 0x57F287,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/welcome-1.png"
    },
    {
        title: "üåü XIN CH√ÄO!",
        description: "·ªí! {user} v·ª´a gia nh·∫≠p {server}! ‚ú®",
        content: "C√°nh c·ª≠a th·∫ßn k·ª≥ v·ª´a m·ªü ra v√† m·ªôt th√†nh vi√™n m·ªõi ƒë√£ xu·∫•t hi·ªán! H√£y ch√†o ƒë√≥n n√†o! üéá",
        color: 0xFEE75C,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/welcome-2.png"
    },
    {
        title: "ü§ó WELCOME ABOARD!",
        description: "Xin ch√†o {user}! C·ªông ƒë·ªìng {server} ch√†o ƒë√≥n b·∫°n! üéà",
        content: "B·∫°n l√† th√†nh vi√™n th·ª© {memberCount} c·ªßa ch√∫ng t√¥i! H√£y c√πng x√¢y d·ª±ng m·ªôt c·ªông ƒë·ªìng tuy·ªát v·ªùi nh√©! üè∞",
        color: 0xEB459E,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/welcome-3.png"
    },
    {
        title: "üöÄ PH√ÅT HI·ªÜN TH√ÄNH VI√äN M·ªöI!",
        description: "Ch√†o m·ª´ng {user} ƒë√£ h·∫° c√°nh t·∫°i {server}! üå†",
        content: "Chuy·∫øn phi√™u l∆∞u m·ªõi c·ªßa b·∫°n t·∫°i {server} s·∫Øp b·∫Øt ƒë·∫ßu! H√£y s·∫µn s√†ng cho nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi! üéÆ",
        color: 0x5865F2,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/welcome-4.png"
    },
    {
        title: "üí´ C√ì TH√ÄNH VI√äN M·ªöI!",
        description: "Hey {user}! B·∫°n ƒë√£ t√¨m th·∫•y {server} - ng√¥i nh√† m·ªõi c·ªßa b·∫°n! üè°",
        content: "Th·∫ø gi·ªõi {server} ch√†o ƒë√≥n b·∫°n! H√£y kh√°m ph√° v√† k·∫øt n·ªëi v·ªõi m·ªçi ng∆∞·ªùi nh√©! üåà",
        color: 0x99AAB5,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/welcome-5.png"
    }
];

const goodbyeMessages = [
    {
        title: "üò¢ T·∫†M BI·ªÜT!",
        description: "{user} ƒë√£ r·ªùi kh·ªèi {server}...",
        content: "Ch√∫c b·∫°n may m·∫Øn tr√™n h√†nh tr√¨nh ti·∫øp theo! Hy v·ªçng s·∫Ω g·∫∑p l·∫°i b·∫°n m·ªôt ng√†y kh√¥ng xa! üåô",
        color: 0xED4245,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/goodbye-1.png"
    },
    {
        title: "üëã ƒê√É C√ì NG∆Ø·ªúI R·ªúI ƒêI",
        description: "{user} v·ª´a n√≥i l·ªùi t·∫°m bi·ªát v·ªõi {server}...",
        content: "C√°nh c·ª≠a ƒë√≥ng l·∫°i, nh∆∞ng k·ª∑ ni·ªám v·∫´n c√≤n ƒë√¢y. H·∫πn g·∫∑p l·∫°i! üíî",
        color: 0xFEE75C,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/goodbye-2.png"
    },
    {
        title: "üö™ TH√ÄNH VI√äN R·ªúI SERVER",
        description: "T·∫°m bi·ªát {user}! C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªìng h√†nh c√πng {server}!",
        content: "D√π b·∫°n ƒëi ƒë√¢u, ch√∫ng t√¥i v·∫´n s·∫Ω nh·ªõ v·ªÅ kho·∫£ng th·ªùi gian b·∫°n ·ªü ƒë√¢y! üì∏",
        color: 0x99AAB5,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/goodbye-3.png"
    },
    {
        title: "üåÖ K·∫æT TH√öC H√ÄNH TR√åNH",
        description: "{user} ƒë√£ k·∫øt th√∫c h√†nh tr√¨nh t·∫°i {server}...",
        content: "M·ªçi cu·ªôc g·∫∑p g·ª° r·ªìi s·∫Ω c√≥ l√∫c chia ly. Ch√∫c b·∫°n t√¨m th·∫•y n∆°i m√¨nh thu·ªôc v·ªÅ! üèûÔ∏è",
        color: 0x5865F2,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/goodbye-4.png"
    },
    {
        title: "üí® C√ì NG∆Ø·ªúI V·ª™A BAY M·∫§T",
        description: "{user} ƒë√£ bi·∫øn m·∫•t kh·ªèi {server} nh∆∞ m·ªôt c∆°n gi√≥...",
        content: "Th·ªùi gian c·ªßa b·∫°n ·ªü ƒë√¢y c√≥ th·ªÉ ng·∫Øn ng·ªßi, nh∆∞ng v·∫´n ƒë√°ng ƒë·ªÉ tr√¢n tr·ªçng! üçÉ",
        color: 0xEB459E,
        image: "https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/goodbye-5.png"
    }
];

// ==================== H·ªÜ TH·ªêNG TIN NH·∫ÆN T·ª∞ ƒê·ªòNG ====================

const scheduleTemplates = {
    morning: {
        title: "üåÖ CH√ÄO BU·ªîI S√ÅNG - 08:00",
        description: "H√£y b·∫Øt ƒë·∫ßu ng√†y m·ªõi v·ªõi nƒÉng l∆∞·ª£ng t√≠ch c·ª±c v√† tr√†n ƒë·∫ßy c·∫£m h·ª©ng! üåû",
        tip: "üí° M·∫πo: U·ªëng m·ªôt ly n∆∞·ªõc ·∫•m ƒë·ªÉ kh·ªüi ƒë·ªông h·ªá ti√™u h√≥a",
        tomorrow: "Ch√∫c b·∫°n m·ªôt ng√†y l√†m vi·ªác hi·ªáu qu·∫£ v√† nhi·ªÅu th√†nh c√¥ng! üíº",
        footer: "Have a wonderful day! üåà"
    },
    noon: {
        title: "üç± GI·ªú ƒÇN TR∆ØA - 12:00",
        description: "ƒê√£ ƒë·∫øn gi·ªù ngh·ªâ ng∆°i v√† n·∫°p nƒÉng l∆∞·ª£ng cho bu·ªïi chi·ªÅu! üçΩÔ∏è",
        tip: "üí° M·∫πo: ƒÇn ch·∫≠m nhai k·ªπ gi√∫p ti√™u h√≥a t·ªët h∆°n",
        tomorrow: "Bu·ªïi chi·ªÅu l√†m vi·ªác hi·ªáu qu·∫£ v√† tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng! üìä",
        footer: "Enjoy your meal! üòã"
    },
    afternoon: {
        title: "üå§Ô∏è BU·ªîI CHI·ªÄU - 17:30", 
        description: "C·ªë l√™n, ch·ªâ c√≤n m·ªôt ch√∫t n·ªØa l√† ho√†n th√†nh ng√†y l√†m vi·ªác! üí™",
        tip: "üí° M·∫πo: ƒê·ª©ng d·∫≠y v∆∞∆°n vai sau m·ªói 30 ph√∫t l√†m vi·ªác",
        tomorrow: "H·∫πn g·∫∑p l·∫°i b·∫°n v√†o ng√†y mai v·ªõi nhi·ªÅu ƒëi·ªÅu th√∫ v·ªã! üåá",
        footer: "You're doing great! üéØ"
    },
    evening: {
        title: "üåÉ BU·ªîI T·ªêI - 20:00",
        description: "Th·ªùi gian th∆∞ gi√£n v√† t·∫≠n h∆∞·ªüng kh√¥ng kh√≠ gia ƒë√¨nh ·∫•m √°p! üõãÔ∏è",
        tip: "üí° M·∫πo: T·∫Øt c√°c thi·∫øt b·ªã ƒëi·ªán t·ª≠ 1 gi·ªù tr∆∞·ªõc khi ng·ªß",
        tomorrow: "Ng√†y mai s·∫Ω mang ƒë·∫øn nh·ªØng c∆° h·ªôi m·ªõi tuy·ªát v·ªùi! ‚ú®",
        footer: "Relax and recharge! üéÆ"
    },
    night: {
        title: "üåô CH√öC NG·ª¶ NGON - 22:00",
        description: "ƒê√™m ƒë√£ khuya! H√£y t·∫Øt m√°y v√† ngh·ªâ ng∆°i th√¥i n√†o! üõå",
        tip: "üí° M·∫πo: Gi·ªØ ph√≤ng ng·ªß m√°t m·∫ª v√† tho√°ng kh√≠",
        tomorrow: "H·∫πn g·∫∑p l·∫°i v√†o bu·ªïi s√°ng! üåÖ",
        footer: "Sweet dreams! üí´"
    }
};

function createScheduleEmbed(type, customDescription = null) {
    const template = scheduleTemplates[type];
    if (!template) return null;

    const colors = {
        morning: 0xFFD700,    // V√†ng
        noon: 0x32CD32,       // Xanh l√°
        afternoon: 0xFFA500,  // Cam
        evening: 0x8A2BE2,    // T√≠m
        night: 0x000080       // Xanh ƒë√™m
    };

    const embed = new EmbedBuilder()
        .setColor(colors[type])
        .setTitle(template.title)
        .setDescription(customDescription || template.description)
        .addFields(
            { 
                name: 'üåü ' + (type === 'morning' ? 'M·∫πo bu·ªïi s√°ng' : 
                              type === 'noon' ? 'M·∫πo ƒÉn u·ªëng' :
                              type === 'afternoon' ? 'M·∫πo l√†m vi·ªác' :
                              type === 'evening' ? 'M·∫πo th∆∞ gi√£n' : 'M·∫πo ng·ªß ngon'), 
                value: template.tip, 
                inline: false 
            },
            { 
                name: 'üìÖ ' + (type === 'night' ? 'Ng√†y mai' : 'Ti·∫øp theo'), 
                value: template.tomorrow, 
                inline: false 
            }
        )
        .setFooter({ text: template.footer })
        .setTimestamp();

    return embed;
}

// ==================== X·ª¨ L√ù S·ª∞ KI·ªÜN CH√çNH ====================

client.on('ready', async () => {
    Logger.success(`${client.user.tag} ƒë√£ s·∫µn s√†ng!`);
    Logger.info(`ƒêang ph·ª•c v·ª• ${client.guilds.cache.size} server`);
    Logger.info(`T·ªïng s·ªë ${client.users.cache.size} ng∆∞·ªùi d√πng`);

    client.user.setPresence({
        activities: [{
            name: 'LeiLaBOT | $help',
            type: ActivityType.Playing
        }],
        status: 'online'
    });

    await setupScheduledMessages();
    setInterval(checkBirthdays, 60 * 60 * 1000);
    checkBirthdays();

    Logger.success('Bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!');
});

client.on('guildMemberAdd', async (member) => {
    Logger.event(`Th√†nh vi√™n m·ªõi: ${member.user.tag} (${member.id}) trong ${member.guild.name}`);
    
    try {
        const welcomeConfig = await loadConfig('welcomeConfig.json');
        
        if (!welcomeConfig.welcomeChannel) {
            Logger.warn(`Ch∆∞a c·∫•u h√¨nh welcome channel trong ${member.guild.name}`);
            return;
        }

        const channel = member.guild.channels.cache.get(welcomeConfig.welcomeChannel);
        if (!channel) {
            Logger.error(`Kh√¥ng t√¨m th·∫•y welcome channel ${welcomeConfig.welcomeChannel} trong ${member.guild.name}`);
            return;
        }

        const randomWelcome = welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)];
        
        const welcomeDescription = randomWelcome.description
            .replace('{user}', member.toString())
            .replace('{server}', member.guild.name);

        const embed = new EmbedBuilder()
            .setColor(randomWelcome.color)
            .setTitle(randomWelcome.title)
            .setDescription(welcomeDescription)
            .addFields(
                { name: 'üéâ Th√†nh vi√™n th·ª©', value: `#${member.guild.memberCount}`, inline: true },
                { name: 'üìÖ Tham gia v√†o', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true },
                { name: 'üè† Server', value: member.guild.name, inline: true }
            )
            .setThumbnail(member.user.displayAvatarURL({ size: 256 }))
            .setImage(randomWelcome.image)
            .setFooter({ 
                text: 'LeiLaBOT ‚Ä¢ Trao g·ª≠i y√™u th∆∞∆°ng', 
                iconURL: client.user?.displayAvatarURL() 
            })
            .setTimestamp();

        if (welcomeConfig.welcomeMessage) {
            const customMessage = welcomeConfig.welcomeMessage
                .replace('{user}', member.toString())
                .replace('{server}', member.guild.name)
                .replace('{memberCount}', member.guild.memberCount.toString());
            
            embed.addFields({
                name: 'üí¨ L·ªùi ch√†o t·ª´ server',
                value: customMessage,
                inline: false
            });
        }

        await channel.send({ 
            content: `üéâ ${member.toString()}`, 
            embeds: [embed] 
        });

        Logger.success(`ƒê√£ ch√†o m·ª´ng th√†nh vi√™n ${member.user.tag} trong ${channel.name}`);

        if (welcomeConfig.welcomeRole) {
            const role = member.guild.roles.cache.get(welcomeConfig.welcomeRole);
            if (role) {
                await member.roles.add(role).catch(error => {
                    Logger.error(`Kh√¥ng th·ªÉ th√™m role cho ${member.user.tag}:`, error);
                });
                Logger.success(`ƒê√£ th√™m role ${role.name} cho ${member.user.tag}`);
            }
        }
    } catch (error) {
        Logger.error(`L·ªói ch√†o m·ª´ng th√†nh vi√™n m·ªõi ${member.user.tag}:`, error);
    }
});

client.on('guildMemberRemove', async (member) => {
    Logger.event(`Th√†nh vi√™n r·ªùi ƒëi: ${member.user.tag} (${member.id}) t·ª´ ${member.guild.name}`);
    
    try {
        const welcomeConfig = await loadConfig('welcomeConfig.json');
        
        if (!welcomeConfig.goodbyeChannel) {
            Logger.warn(`Ch∆∞a c·∫•u h√¨nh goodbye channel trong ${member.guild.name}`);
            return;
        }

        const channel = member.guild.channels.cache.get(welcomeConfig.goodbyeChannel);
        if (!channel) {
            Logger.error(`Kh√¥ng t√¨m th·∫•y goodbye channel ${welcomeConfig.goodbyeChannel} trong ${member.guild.name}`);
            return;
        }

        const randomGoodbye = goodbyeMessages[Math.floor(Math.random() * goodbyeMessages.length)];
        
        const goodbyeDescription = randomGoodbye.description
            .replace('{user}', member.user.tag)
            .replace('{server}', member.guild.name);

        const embed = new EmbedBuilder()
            .setColor(randomGoodbye.color)
            .setTitle(randomGoodbye.title)
            .setDescription(goodbyeDescription)
            .addFields(
                { name: 'üìä T·ªïng th√†nh vi√™n', value: `${member.guild.memberCount}`, inline: true },
                { name: '‚è∞ R·ªùi ƒëi l√∫c', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true },
                { name: 'üë§ T√†i kho·∫£n t·∫°o', value: `<t:${Math.floor(member.user.createdTimestamp / 1000)}:R>`, inline: true }
            )
            .setThumbnail(member.user.displayAvatarURL({ size: 256 }))
            .setImage(randomGoodbye.image)
            .setFooter({ 
                text: 'LeiLaBOT ‚Ä¢ H·∫πn g·∫∑p l·∫°i!', 
                iconURL: client.user?.displayAvatarURL() 
            })
            .setTimestamp();

        if (welcomeConfig.goodbyeMessage) {
            const customMessage = welcomeConfig.goodbyeMessage
                .replace('{user}', member.user.tag)
                .replace('{server}', member.guild.name);
            
            embed.addFields({
                name: 'üí¨ L·ªùi nh·∫Øn t·ª´ server',
                value: customMessage,
                inline: false
            });
        }

        await channel.send({ embeds: [embed] });
        Logger.success(`ƒê√£ g·ª≠i tin nh·∫Øn t·∫°m bi·ªát cho ${member.user.tag} trong ${channel.name}`);
    } catch (error) {
        Logger.error(`L·ªói g·ª≠i tin nh·∫Øn t·∫°m bi·ªát cho ${member.user.tag}:`, error);
    }
});

// ==================== X·ª¨ L√ù L·ªÜNH ====================

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    const prefixConfig = await loadConfig('prefix.json', { prefix: "$" });
    const prefix = prefixConfig.prefix;

    if (message.channel.type === 1) {
        Logger.command(`DM t·ª´ ${message.author.tag}: ${message.content}`);
        
        try {
            const botConfig = await loadConfig('botConfig.json');
            
            if (botConfig.autoReply) {
                const responses = [
                    "Xin ch√†o! T√¥i l√† LeiLaBOT. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ ·∫°? üí´",
                    "Hi! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? ü§ñ",
                    "Ch√†o b·∫°n! G√µ `$help` ƒë·ªÉ xem danh s√°ch l·ªánh nh√©! üìö",
                    "Xin ch√†o! C·∫ßn tr·ª£ gi√∫p g√¨ kh√¥ng? üåü",
                    "Hello! B·∫°n c√≥ th·ªÉ tham gia server h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c gi√∫p ƒë·ª° t·ªët h∆°n! üéØ"
                ];
                
                const randomResponse = responses[Math.floor(Math.random() * responses.length)];
                const embed = createEmbed('primary', 'üí¨ LeiLaBOT Support', randomResponse)
                    .addFields(
                        { name: 'üîó Server h·ªó tr·ª£', value: '[Tham gia ngay](https://discord.gg/9CFJxJUBj7)', inline: true },
                        { name: 'üìö L·ªánh', value: 'G√µ `$help`', inline: true }
                    );

                await message.reply({ embeds: [embed] });
                Logger.info(`ƒê√£ ph·∫£n h·ªìi DM t·ª´ ${message.author.tag}`);
            }

            if (botConfig.dmLogChannel) {
                const logChannel = client.channels.cache.get(botConfig.dmLogChannel);
                if (logChannel) {
                    const embed = createEmbed('info', 'üì® Tin nh·∫Øn DM m·ªõi', 
                        `**Ng∆∞·ªùi g·ª≠i:** ${message.author.tag} (${message.author.id})\n**N·ªôi dung:** ${message.content}`)
                        .setThumbnail(message.author.displayAvatarURL());

                    await logChannel.send({ embeds: [embed] });
                    Logger.info(`ƒê√£ log DM t·ª´ ${message.author.tag} ƒë·∫øn k√™nh ${logChannel.name}`);
                }
            }
        } catch (error) {
            Logger.error(`L·ªói x·ª≠ l√Ω DM t·ª´ ${message.author.tag}:`, error);
        }
        return;
    }

    if (!message.content.startsWith(prefix)) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    Logger.command(`L·ªánh t·ª´ ${message.author.tag} trong #${message.channel.name} (${message.guild.name}): ${message.content}`, {
        user: message.author.tag,
        userId: message.author.id,
        guild: message.guild.name,
        channel: message.channel.name,
        command: command,
        args: args
    });

    try {
        // L·ªÜNH TH√îNG TIN
        if (command === 'ping') {
            const processingEmbed = createEmbed('info', '‚è≥ ƒêang x·ª≠ l√Ω...', 'ƒêang t√≠nh to√°n ƒë·ªô tr·ªÖ...');
            const msg = await message.reply({ embeds: [processingEmbed] });
            
            const ping = msg.createdTimestamp - message.createdTimestamp;
            const embed = createEmbed('success', 'üèì Pong!', 'ƒê·ªô tr·ªÖ h·ªá th·ªëng:')
                .addFields(
                    { name: 'üì° ƒê·ªô tr·ªÖ tin nh·∫Øn', value: `\`${ping}ms\``, inline: true },
                    { name: 'üíì ƒê·ªô tr·ªÖ API', value: `\`${Math.round(client.ws.ping)}ms\``, inline: true },
                    { name: '‚è∞ Uptime', value: `\`${formatUptime(process.uptime())}\``, inline: true }
                )
                .setThumbnail('https://cdn.discordapp.com/emojis/1107540430879342694.webp');

            await msg.edit({ embeds: [embed] });
        }

        if (command === 'help' || command === 'commands') {
            const embed = createEmbed('primary', 'ü§ñ LeiLaBOT - H·ªá th·ªëng l·ªánh', 
                `**Prefix hi·ªán t·∫°i:** \`${prefix}\`\nD∆∞·ªõi ƒë√¢y l√† t·∫•t c·∫£ c√°c l·ªánh c√≥ s·∫µn:`)
                .addFields(
                    {
                        name: 'üéµ √Çm nh·∫°c',
                        value: '```play, stop, pause, resume, skip, queue, volume, loop, nowplaying```',
                        inline: true
                    },
                    {
                        name: 'üîß Ti·ªán √≠ch',
                        value: '```ping, help, info, userinfo, serverinfo, avatar```',
                        inline: true
                    },
                    {
                        name: 'üë• Qu·∫£n l√Ω',
                        value: '```setprefix, setwelcome, setgoodbye, setwelcomerole, setdmlog, setschedulechannel, clear, slowmode```',
                        inline: true
                    },
                    {
                        name: '‚è∞ T·ª± ƒë·ªông',
                        value: '```setschedule, testschedule, testschedulenow, testallschedules, setbirthday, scheduleinfo, toggleschedule```',
                        inline: true
                    },
                    {
                        name: 'üëã Ch√†o m·ª´ng',
                        value: '```welcometemplates, goodbyetemplates, testwelcome, testgoodbye```',
                        inline: true
                    },
                    {
                        name: 'üéÆ Gi·∫£i tr√≠',
                        value: '```poll, guess, quiz, lottery, remindme```',
                        inline: true
                    },
                    {
                        name: 'üåê Ti·ªán √≠ch',
                        value: '```translate, weather, covid```',
                        inline: true
                    }
                )
                .setImage('https://cdn.discordapp.com/attachments/1045746639303876638/1234567890123456789/help-banner.png');

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setLabel('üì• M·ªùi Bot')
                        .setStyle(ButtonStyle.Link)
                        .setURL('https://discord.com/oauth2/authorize?client_id=1421716299947708436'),
                    new ButtonBuilder()
                        .setLabel('üÜò H·ªó tr·ª£')
                        .setStyle(ButtonStyle.Link)
                        .setURL('https://discord.gg/9CFJxJUBj7'),
                    new ButtonBuilder()
                        .setLabel('üåê Website')
                        .setStyle(ButtonStyle.Link)
                        .setURL('https://leilabot.railway.app')
                );

            await message.reply({ embeds: [embed], components: [row] });
        }

        // L·ªÜNH DEBUG V√Ä QU·∫¢N L√ù
        if (command === 'debugconfig') {
            const botConfig = await loadConfig('botConfig.json');
            
            const embed = createEmbed('info', 'üîß Debug Config')
                .addFields(
                    { name: 'üìÅ Schedule Channel ID', value: `\`${botConfig.scheduleChannel}\``, inline: true },
                    { name: 'üìù DM Log Channel ID', value: `\`${botConfig.dmLogChannel}\``, inline: true },
                    { name: '‚öôÔ∏è Schedule Enabled', value: botConfig.scheduleEnabled !== false ? '‚úÖ' : '‚ùå', inline: true }
                )
                .setFooter({ text: `Config ƒë∆∞·ª£c load l√∫c: ${new Date().toLocaleString('vi-VN')}` });

            await message.reply({ embeds: [embed] });
        }

        if (command === 'reloadconfig') {
            if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
                return message.reply({ embeds: [embed] });
            }

            const embed = createEmbed('success', '‚úÖ Th√†nh c√¥ng', 'ƒê√£ reload config th√†nh c√¥ng!');
            await message.reply({ embeds: [embed] });
            Logger.info(`ƒê√£ reload config b·ªüi ${message.author.tag}`);
        }

        if (command === 'debugschedule') {
            const botConfig = await loadConfig('botConfig.json');
            
            const embed = createEmbed('info', 'üîß Debug Schedule System')
                .addFields(
                    { name: 'üìÅ Schedule Channel ID', value: `\`${botConfig.scheduleChannel}\``, inline: true },
                    { name: 'üîç Channel Found', value: client.channels.cache.has(botConfig.scheduleChannel) ? '‚úÖ' : '‚ùå', inline: true },
                    { name: '‚öôÔ∏è Schedule Enabled', value: botConfig.scheduleEnabled !== false ? '‚úÖ' : '‚ùå', inline: true }
                );

            if (client.channels.cache.has(botConfig.scheduleChannel)) {
                const channel = client.channels.cache.get(botConfig.scheduleChannel);
                embed.addFields(
                    { name: 'üìù Channel Name', value: channel.name, inline: true },
                    { name: 'üè† Guild', value: channel.guild.name, inline: true },
                    { name: 'üîê Permissions', value: channel.permissionsFor(client.user).has('SendMessages') ? '‚úÖ C√≥ quy·ªÅn' : '‚ùå Kh√¥ng c√≥ quy·ªÅn', inline: true }
                );
            }

            await message.reply({ embeds: [embed] });
        }

        if (command === 'testschedulenow') {
            const type = args[0] || 'morning';
            
            if (!['morning', 'noon', 'afternoon', 'evening', 'night'].includes(type)) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'Lo·∫°i schedule kh√¥ng h·ª£p l·ªá. C√°c lo·∫°i: morning, noon, afternoon, evening, night');
                return message.reply({ embeds: [embed] });
            }

            try {
                const botConfig = await loadConfig('botConfig.json');
                
                if (!botConfig.scheduleChannel) {
                    const embed = createEmbed('error', '‚ùå L·ªói', 'Ch∆∞a c·∫•u h√¨nh schedule channel!');
                    return message.reply({ embeds: [embed] });
                }

                const channel = await client.channels.fetch(botConfig.scheduleChannel).catch(() => null);
                if (!channel) {
                    const embed = createEmbed('error', '‚ùå L·ªói', `Kh√¥ng t√¨m th·∫•y k√™nh: ${botConfig.scheduleChannel}`);
                    return message.reply({ embeds: [embed] });
                }

                const embed = createScheduleEmbed(type);
                if (embed) {
                    await channel.send({ 
                        content: `üß™ **TEST SCHEDULE** - ${type.toUpperCase()}`,
                        embeds: [embed] 
                    });
                    
                    const successEmbed = createEmbed('success', '‚úÖ Th√†nh c√¥ng', 
                        `ƒê√£ g·ª≠i tin nh·∫Øn test schedule **${type}** ƒë·∫øn k√™nh ${channel.toString()}`);
                    await message.reply({ embeds: [successEmbed] });
                    
                    Logger.success(`ƒê√£ test schedule ${type} trong k√™nh ${channel.name}`);
                }
            } catch (error) {
                Logger.error(`L·ªói test schedule ${type}:`, error);
                const embed = createEmbed('error', '‚ùå L·ªói', `L·ªói khi test schedule: ${error.message}`);
                await message.reply({ embeds: [embed] });
            }
        }

        // L·ªÜNH QU·∫¢N L√ù SERVER
        if (command === 'setschedulechannel') {
            if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
                return message.reply({ embeds: [embed] });
            }

            const channel = message.mentions.channels.first() || message.guild.channels.cache.get(args[0]);
            if (!channel) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'Vui l√≤ng ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt k√™nh h·ª£p l·ªá!');
                return message.reply({ embeds: [embed] });
            }

            const botConfig = await loadConfig('botConfig.json');
            botConfig.scheduleChannel = channel.id;
            await saveConfig('botConfig.json', botConfig);

            const embed = createEmbed('success', '‚úÖ Th√†nh c√¥ng', 
                `ƒê√£ ƒë·∫∑t k√™nh tin nh·∫Øn t·ª± ƒë·ªông th√†nh ${channel.toString()}`);
            await message.reply({ embeds: [embed] });
            Logger.info(`ƒê√£ ƒë·∫∑t schedule channel th√†nh ${channel.name} b·ªüi ${message.author.tag}`);
        }

        if (command === 'toggleschedule') {
            if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
                return message.reply({ embeds: [embed] });
            }

            const botConfig = await loadConfig('botConfig.json');
            botConfig.scheduleEnabled = !botConfig.scheduleEnabled;
            await saveConfig('botConfig.json', botConfig);

            const embed = createEmbed('success', '‚úÖ Th√†nh c√¥ng', 
                `Tin nh·∫Øn t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c ${botConfig.scheduleEnabled ? '**b·∫≠t**' : '**t·∫Øt**'}`);
            await message.reply({ embeds: [embed] });
            Logger.info(`ƒê√£ ${botConfig.scheduleEnabled ? 'b·∫≠t' : 't·∫Øt'} schedule b·ªüi ${message.author.tag}`);
        }

        if (command === 'scheduleinfo') {
            const botConfig = await loadConfig('botConfig.json');
            const channel = botConfig.scheduleChannel ? client.channels.cache.get(botConfig.scheduleChannel) : null;

            let scheduleText = '';
            const scheduleTimes = [
                { time: '08:00', type: 'morning' },
                { time: '12:00', type: 'noon' },
                { time: '17:30', type: 'afternoon' },
                { time: '20:00', type: 'evening' },
                { time: '22:00', type: 'night' }
            ];

            scheduleTimes.forEach(({ time, type }) => {
                const template = scheduleTemplates[type];
                scheduleText += `**${time} - ${template.title.split(' - ')[0]}**\n${template.description}\n\n`;
            });

            const embed = createEmbed('info', '‚úÖ TH√îNG TIN TIN NH·∫ÆN T·ª∞ ƒê·ªòNG', 
                `**K√™nh tin nh·∫Øn t·ª± ƒë·ªông:** ${channel ? channel.toString() : 'Ch∆∞a c·∫•u h√¨nh'}\n\n${scheduleText}`)
                .addFields(
                    { name: 'üåê M√∫i gi·ªù', value: 'Asia/Ho_Chi_Minh (GMT+7)', inline: true },
                    { name: 'üìä Tr·∫°ng th√°i', value: botConfig.scheduleEnabled !== false ? '‚úÖ ƒêang ho·∫°t ƒë·ªông' : '‚ùå ƒê√£ t·∫Øt', inline: true },
                    { name: 'üé® ƒê·ªãnh d·∫°ng', value: 'Embed', inline: true }
                )
                .setFooter({ text: 'S·ª≠ d·ª•ng testschedule [lo·∫°i] ƒë·ªÉ xem m·∫´u tin nh·∫Øn' });

            await message.reply({ embeds: [embed] });
        }

        // L·ªÜNH CH√ÄO M·ª™NG
        if (command === 'testwelcome') {
            if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
                return message.reply({ embeds: [embed] });
            }

            const welcomeConfig = await loadConfig('welcomeConfig.json');
            if (!welcomeConfig.welcomeChannel) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'Ch∆∞a c·∫•u h√¨nh k√™nh ch√†o m·ª´ng!');
                return message.reply({ embeds: [embed] });
            }

            const channel = message.guild.channels.cache.get(welcomeConfig.welcomeChannel);
            if (!channel) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'Kh√¥ng t√¨m th·∫•y k√™nh ch√†o m·ª´ng!');
                return message.reply({ embeds: [embed] });
            }

            const randomWelcome = welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)];
            
            const welcomeDescription = randomWelcome.description
                .replace('{user}', message.author.toString())
                .replace('{server}', message.guild.name);

            const embed = new EmbedBuilder()
                .setColor(randomWelcome.color)
                .setTitle('üß™ TEST: ' + randomWelcome.title)
                .setDescription(welcomeDescription)
                .addFields(
                    { name: 'üéâ Th√†nh vi√™n th·ª©', value: `#${message.guild.memberCount}`, inline: true },
                    { name: 'üìÖ Tham gia v√†o', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true },
                    { name: 'üè† Server', value: message.guild.name, inline: true }
                )
                .setThumbnail(message.author.displayAvatarURL({ size: 256 }))
                .setImage(randomWelcome.image)
                .setFooter({ 
                    text: 'LeiLaBOT ‚Ä¢ Trao g·ª≠i y√™u th∆∞∆°ng', 
                    iconURL: client.user?.displayAvatarURL() 
                })
                .setTimestamp();

            await channel.send({ 
                content: `üéâ ${message.author.toString()} (TEST)`, 
                embeds: [embed] 
            });

            const successEmbed = createEmbed('success', '‚úÖ Th√†nh c√¥ng', 
                `ƒê√£ g·ª≠i tin nh·∫Øn test ch√†o m·ª´ng ƒë·∫øn ${channel.toString()}`);
            await message.reply({ embeds: [successEmbed] });
        }

        // L·ªÜNH SETPREFIX
        if (command === 'setprefix') {
            if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
                return message.reply({ embeds: [embed] });
            }

            const newPrefix = args[0];
            if (!newPrefix || newPrefix.length > 3) {
                const embed = createEmbed('error', '‚ùå L·ªói', 'Prefix ph·∫£i c√≥ t·ª´ 1-3 k√Ω t·ª±!');
                return message.reply({ embeds: [embed] });
            }

            await saveConfig('prefix.json', { prefix: newPrefix });
            const embed = createEmbed('success', '‚úÖ Th√†nh c√¥ng', 
                `Prefix ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh: \`${newPrefix}\``);
            await message.reply({ embeds: [embed] });
            Logger.info(`ƒê√£ ƒë·ªïi prefix th√†nh ${newPrefix} b·ªüi ${message.author.tag}`);
        }

    } catch (error) {
        Logger.error(`L·ªói x·ª≠ l√Ω l·ªánh ${command} t·ª´ ${message.author.tag}:`, error);
        const embed = createEmbed('error', '‚ùå L·ªói h·ªá th·ªëng', 
            'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh! Vui l√≤ng th·ª≠ l·∫°i sau.');
        await message.reply({ embeds: [embed] });
    }
   // ==================== TH√äM L·ªÜNH QU·∫¢N L√ù SINH NH·∫¨T ====================

    if (command === 'setbirthdaychannel') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
            const embed = createEmbed('error', '‚ùå L·ªói', 'B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
            return message.reply({ embeds: [embed] });
        }

        const channel = message.mentions.channels.first() || message.guild.channels.cache.get(args[0]);
        if (!channel) {
            const embed = createEmbed('error', '‚ùå L·ªói', 'Vui l√≤ng ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt k√™nh h·ª£p l·ªá!');
            return message.reply({ embeds: [embed] });
        }

        const birthdayConfig = await loadConfig('birthdayConfig.json', {});
        birthdayConfig[message.guild.id] = channel.id;
        await saveConfig('birthdayConfig.json', birthdayConfig);

        const embed = createEmbed('success', '‚úÖ Th√†nh c√¥ng', 
            `ƒê√£ ƒë·∫∑t k√™nh th√¥ng b√°o sinh nh·∫≠t th√†nh ${channel.toString()}\n\nTh√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o l√∫c **9:00** v√† **19:00** h√†ng ng√†y.`);
        await message.reply({ embeds: [embed] });
        Logger.info(`ƒê√£ ƒë·∫∑t birthday channel th√†nh ${channel.name} trong ${message.guild.name} b·ªüi ${message.author.tag}`);
    }

    if (command === 'setbirthday') {
        const dateStr = args[0];
        if (!dateStr || !/^\d{1,2}-\d{1,2}$/.test(dateStr)) {
            const embed = createEmbed('error', '‚ùå L·ªói', 'Vui l√≤ng nh·∫≠p ng√†y sinh theo ƒë·ªãnh d·∫°ng: DD-MM (v√≠ d·ª•: 15-08 cho ng√†y 15 th√°ng 8)');
            return message.reply({ embeds: [embed] });
        }

        const [day, month] = dateStr.split('-').map(Number);
        if (day < 1 || day > 31 || month < 1 || month > 12) {
            const embed = createEmbed('error', '‚ùå L·ªói', 'Ng√†y ho·∫∑c th√°ng kh√¥ng h·ª£p l·ªá!');
            return message.reply({ embeds: [embed] });
        }

        const birthdays = await loadData('birthdays.json');
        birthdays[message.author.id] = `${String(day).padStart(2, '0')}-${String(month).padStart(2, '0')}`;
        await saveData('birthdays.json', birthdays);

        const embed = createEmbed('success', '‚úÖ Th√†nh c√¥ng', 
            `ƒê√£ ƒë·∫∑t ng√†y sinh c·ªßa b·∫°n l√† **${dateStr}**\n\nBot s·∫Ω th√¥ng b√°o sinh nh·∫≠t c·ªßa b·∫°n v√†o l√∫c 9:00 v√† 19:00 trong ng√†y sinh nh·∫≠t! üéâ`);
        await message.reply({ embeds: [embed] });
        Logger.info(`ƒê√£ ƒë·∫∑t ng√†y sinh cho ${message.author.tag} l√† ${dateStr}`);
    }

    if (command === 'birthdayinfo') {
        const birthdayConfig = await loadConfig('birthdayConfig.json', {});
        const birthdays = await loadData('birthdays.json');
        
        const channel = birthdayConfig[message.guild.id] ? 
            message.guild.channels.cache.get(birthdayConfig[message.guild.id]) : null;
        
        const userBirthday = birthdays[message.author.id];
        
        const embed = createEmbed('info', 'üéâ TH√îNG TIN H·ªÜ TH·ªêNG SINH NH·∫¨T')
            .addFields(
                { 
                    name: 'üìÖ Ng√†y sinh c·ªßa b·∫°n', 
                    value: userBirthday ? `**${userBirthday}**` : 'Ch∆∞a ƒë·∫∑t', 
                    inline: true 
                },
                { 
                    name: 'üì¢ K√™nh th√¥ng b√°o', 
                    value: channel ? channel.toString() : 'Ch∆∞a c·∫•u h√¨nh', 
                    inline: true 
                },
                { 
                    name: '‚è∞ Th·ªùi gian th√¥ng b√°o', 
                    value: '9:00 v√† 19:00 h√†ng ng√†y', 
                    inline: true 
                }
            )
            .setFooter({ text: 'S·ª≠ d·ª•ng setbirthday DD-MM ƒë·ªÉ ƒë·∫∑t ng√†y sinh' });

        await message.reply({ embeds: [embed] });
    }

    if (command === 'checkbirthday') {
        const birthdays = await loadData('birthdays.json');
        const today = new Date();
        const todayStr = `${String(today.getDate()).padStart(2, '0')}-${String(today.getMonth() + 1).padStart(2, '0')}`;
        
        let birthdayUsers = [];
        for (const [userId, birthday] of Object.entries(birthdays)) {
            if (birthday === todayStr) {
                const user = await client.users.fetch(userId).catch(() => null);
                if (user) {
                    birthdayUsers.push(user.tag);
                }
            }
        }
        
        const embed = createEmbed('info', 'üéâ KI·ªÇM TRA SINH NH·∫¨T H√îM NAY')
            .addFields(
                { 
                    name: 'üìÖ Ng√†y h√¥m nay', 
                    value: todayStr, 
                    inline: true 
                },
                { 
                    name: 'üë• S·ªë ng∆∞·ªùi sinh nh·∫≠t', 
                    value: birthdayUsers.length.toString(), 
                    inline: true 
                },
                { 
                    name: 'üéÇ Danh s√°ch', 
                    value: birthdayUsers.length > 0 ? birthdayUsers.join('\n') : 'Kh√¥ng c√≥ ai sinh nh·∫≠t h√¥m nay', 
                    inline: false 
                }
            );

        await message.reply({ embeds: [embed] });
    } 
});

// ==================== H·ªÜ TH·ªêNG TIN NH·∫ÆN T·ª∞ ƒê·ªòNG ====================

async function setupScheduledMessages() {
    try {
        const scheduleTimes = [
            { time: '0 8 * * *', type: 'morning' },
            { time: '0 12 * * *', type: 'noon' },
            { time: '30 17 * * *', type: 'afternoon' },
            { time: '0 20 * * *', type: 'evening' },
            { time: '0 22 * * *', type: 'night' }
        ];

        scheduleTimes.forEach(({ time, type }) => {
            cron.schedule(time, async () => {
                try {
                    // QUAN TR·ªåNG: Load config M·ªöI m·ªói l·∫ßn cron ch·∫°y
                    const botConfig = await loadConfig('botConfig.json');
                    
                    if (!botConfig.scheduleChannel) {
                        Logger.error(`[Cron ${type}] Ch∆∞a c·∫•u h√¨nh scheduleChannel`);
                        return;
                    }

                    if (botConfig.scheduleEnabled === false) {
                        Logger.info(`[Cron ${type}] Tin nh·∫Øn t·ª± ƒë·ªông ƒë√£ b·ªã t·∫Øt`);
                        return;
                    }

                    // Load channel M·ªöI t·ª´ config m·ªõi nh·∫•t
                    const channel = await client.channels.fetch(botConfig.scheduleChannel).catch(() => null);
                    if (!channel) {
                        Logger.error(`[Cron ${type}] Kh√¥ng t√¨m th·∫•y k√™nh: ${botConfig.scheduleChannel}`);
                        return;
                    }

                    // Ki·ªÉm tra quy·ªÅn
                    if (!channel.permissionsFor(client.user)?.has(['SendMessages', 'ViewChannel'])) {
                        Logger.error(`[Cron ${type}] Kh√¥ng ƒë·ªß quy·ªÅn trong k√™nh: ${channel.name}`);
                        return;
                    }

                    const embed = createScheduleEmbed(type);
                    if (embed) {
                        await channel.send({ embeds: [embed] });
                        Logger.success(`[Cron ${type}] ƒê√£ g·ª≠i tin nh·∫Øn t·ª± ƒë·ªông trong k√™nh: ${channel.name}`, {
                            channelId: channel.id,
                            channelName: channel.name,
                            type: type,
                            time: new Date().toLocaleString('vi-VN')
                        });
                    }
                } catch (error) {
                    Logger.error(`[Cron ${type}] L·ªói g·ª≠i tin nh·∫Øn t·ª± ƒë·ªông:`, error);
                }
            }, {
                timezone: 'Asia/Ho_Chi_Minh'
            });
        });

        Logger.success('ƒê√£ thi·∫øt l·∫≠p h·ªá th·ªëng tin nh·∫Øn t·ª± ƒë·ªông');
    } catch (error) {
        Logger.error('L·ªói thi·∫øt l·∫≠p tin nh·∫Øn t·ª± ƒë·ªông:', error);
    }
}

// ==================== H·ªÜ TH·ªêNG SINH NH·∫¨T ====================

async function checkBirthdays() {
    try {
        const birthdays = await loadData('birthdays.json');
        const birthdayConfig = await loadConfig('birthdayConfig.json', {});
        const today = new Date();
        const todayStr = `${String(today.getDate()).padStart(2, '0')}-${String(today.getMonth() + 1).padStart(2, '0')}`;

        Logger.info(`Ki·ªÉm tra sinh nh·∫≠t: ${todayStr}`, {
            totalUsers: Object.keys(birthdays).length,
            birthdayChannels: Object.keys(birthdayConfig).length
        });

        let birthdayCount = 0;

        for (const [userId, birthday] of Object.entries(birthdays)) {
            if (birthday === todayStr) {
                const user = await client.users.fetch(userId).catch(() => null);
                if (user) {
                    birthdayCount++;
                    
                    const embed = createEmbed('fun', 'üéâ Ch√∫c m·ª´ng sinh nh·∫≠t!', 
                        `Ch√∫c m·ª´ng sinh nh·∫≠t ${user}! üéÇ\n\nCh√∫c b·∫°n m·ªôt ng√†y th·∫≠t tuy·ªát v·ªùi v·ªõi nhi·ªÅu ni·ªÅm vui v√† h·∫°nh ph√∫c! üéàüéÅ`)
                        .setThumbnail(user.displayAvatarURL())
                        .addFields(
                            { name: 'üéÇ Tu·ªïi m·ªõi', value: 'Th√™m m·ªôt tu·ªïi m·ªõi, th√™m nhi·ªÅu th√†nh c√¥ng!', inline: true },
                            { name: 'üéÅ L·ªùi ch√∫c', value: 'Lu√¥n vui v·∫ª v√† h·∫°nh ph√∫c nh√©!', inline: true }
                        );

                    // G·ª≠i ƒë·∫øn t·∫•t c·∫£ server c√≥ c·∫•u h√¨nh k√™nh sinh nh·∫≠t
                    for (const [guildId, channelId] of Object.entries(birthdayConfig)) {
                        const guild = client.guilds.cache.get(guildId);
                        if (guild) {
                            const channel = guild.channels.cache.get(channelId);
                            if (channel) {
                                const member = guild.members.cache.get(userId);
                                if (member) {
                                    await channel.send({ 
                                        content: `üéâ ${member.toString()}`,
                                        embeds: [embed] 
                                    }).catch(error => {
                                        Logger.error(`L·ªói g·ª≠i tin nh·∫Øn sinh nh·∫≠t trong ${guild.name}:`, error);
                                    });
                                    Logger.success(`ƒê√£ g·ª≠i l·ªùi ch√∫c sinh nh·∫≠t cho ${user.tag} trong ${guild.name}`);
                                }
                            }
                        }
                    }
                }
            }
        }

        if (birthdayCount > 0) {
            Logger.success(`ƒê√£ ch√∫c m·ª´ng sinh nh·∫≠t ${birthdayCount} ng∆∞·ªùi d√πng`);
        }
    } catch (error) {
        Logger.error('L·ªói ki·ªÉm tra sinh nh·∫≠t:', error);
    }
}

// ==================== H√ÄM TI·ªÜN √çCH ====================

function formatUptime(seconds) {
    const days = Math.floor(seconds / (24 * 60 * 60));
    const hours = Math.floor((seconds % (24 * 60 * 60)) / (60 * 60));
    const minutes = Math.floor((seconds % (60 * 60)) / 60);
    const secs = Math.floor(seconds % 60);

    const parts = [];
    if (days > 0) parts.push(`${days} ng√†y`);
    if (hours > 0) parts.push(`${hours} gi·ªù`);
    if (minutes > 0) parts.push(`${minutes} ph√∫t`);
    if (secs > 0) parts.push(`${secs} gi√¢y`);

    return parts.join(' ');
}

// ==================== X·ª¨ L√ù L·ªñI ====================

client.on('error', (error) => {
    Logger.error('L·ªói Discord Client:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    Logger.error('Unhandled Rejection t·∫°i:', { promise, reason });
});

process.on('uncaughtException', (error) => {
    Logger.error('Uncaught Exception:', error);
    process.exit(1);
});

// ==================== KH·ªûI CH·∫†Y BOT ====================

client.login(process.env.DISCORD_TOKEN)
    .then(() => {
        Logger.success('Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!');
    })
    .catch(error => {
        Logger.error('L·ªói ƒëƒÉng nh·∫≠p bot:', error);
        process.exit(1);
    });